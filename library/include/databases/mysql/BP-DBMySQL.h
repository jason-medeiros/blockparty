#ifndef BPDBMYSQL_H_
#define BPDBMYSQL_H_

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Blockparty MySQL Defines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// display debug output
#define DEBUG_MYSQL_OUTPUT BP_TRUE

// this is emitted when a timeout is exceeded
#define MYSQL_LOCK_WAIT_TIMEOUT_EXCEEDED_MSG "Lock wait timeout exceeded; try restarting transaction"


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Critical Section Macros %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// enter critical section
#define BP_MYSQL_ENTER_CRITICAL_SECTION\
	BP_HASH_TABLE_ENTER_CRITICAL_SECTION(mysqlSession->system_hreg);

// leave critical section
#define BP_MYSQL_LEAVE_CRITICAL_SECTION\
	BP_HASH_TABLE_LEAVE_CRITICAL_SECTION(mysqlSession->system_hreg);

// simple utility to leave critical section and return from function
#define BP_MYSQL_LEAVE_CRITICAL_SECTION_AND_RETURN_FROM_FUNC(val)\
		BP_HASH_TABLE_LEAVE_CRITICAL_SECTION_AND_RETURN_FROM_FUNC(mysqlSession->system_hreg, val);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Enumerators %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Enumeration of mysql error types
typedef enum BP_MYSQL_ERROR_T
{
	BP_MYSQL_ERROR_NONE,
	BP_MYSQL_ERROR_SYNTAX,
	BP_MYSQL_ERROR_CONNECT,
	BP_MYSQL_ERROR_PREPARE,
	BP_MYSQL_ERROR_FETCH,
	BP_MYSQL_ERROR_BIND,
	BP_MYSQL_ERROR_EXECUTE,
	BP_MYSQL_ERROR_STORE,
	BP_MYSQL_ERROR_DESTROY,
	BP_MYSQL_ERROR_CLOSE
};


typedef enum BP_MYSQL_QUERY_ERROR_CODE
{
	BP_MYSQL_QUERY_ERROR_CODE_NO_SESSION = -666,
	BP_MYSQL_QUERY_ERROR_CODE_NOT_CONNECTED = -777,
};

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Session Structure Modifications %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Structure for holding error information which may be generated by
// by using various mysql routines.  Stored directly within the session
// itself, and can be added by BP_MySQLAddErr().
typedef struct __BP_MYSQL_ERROR {

	// error type associated with this
	BP_MYSQL_ERROR_T err_type;

	// error number
	size_t err_number;

	// error string associated with error
	char * err_string;

	// thread id associated with this error
	size_t thread_id;

	// === BPLN Data =================

	// filename associated with this entry
	char * file_name;

	// line number which this occured on
	size_t line_number;

	// the function associated
	char * func;

	// the last prepared query
	char * query;

} BP_MYSQL_ERROR, *P_BP_MYSQL_ERROR;



/*
 * BP_MYSQL_SESSION:
 *
 * This is a notable structure, as it is used consistently within the
 * blockparty library for most database functions.  This should be completely
 * compatible with mariadb if in the case you choose you prefer to not use
 * MySQL.
 *
 * This structure represnts the "MySQL Session" base layer of database connectivity. It
 * is an abstraction for making managment of MySQL connectivity, much easier.  It essentially
 * reduces the complexity of the libmysqlclient_r library by providing a handle to common
 * datasets relative to database operations.
 *
 */

typedef struct _BP_MYSQL_SESSION {

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Global UUID %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// uuid for this session
	char * uuid;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Hash Registries %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// system hash registry (Added 2015, mainly for implementing critical sections)
	P_BP_HASH_TABLE_REGISTRY system_hreg;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Connection Pool Members %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// this is set to BP_TRUE if this session is available.  If it is unavailable,
	// it is set to BP_FALSE instead.
	BP_BOOL pool_available;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Tail Queue Allocator (Old, but still used) %%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Tailqueue allocator for all local memory.  This is created when the session
	// is created, and destroyed when the session is destroyed.
	P_BP_LINKL tq;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Database Lock (usable, but old) Use Critial Sections Instead %%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Semaphore for atomically locking mysql connections between
	// threads.  This prevents any contention that may occur, but not
	// with regard to application flow.  This just acts as a mechanism
	// to prevent threads from going haywire if perhaps this lib is
	// not well implemented by a poor developer.  Your application should
	// contain it's own semaphores for database access, or use threaded
	// database connection pooling to get around contentiveness.
	sem_t db_lock;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% MySQL Connection Itself (actual connection pointer %%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// The actual mysql connection object being operated on by
	// the session related functions below.
	MYSQL *conn;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Connection Flags %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// if the last call to BP_MySQLConnect failed to connect, the structure
	// is still returned, however this flag will indicate if the connection
	// failed or not.
	BP_BOOL last_connection_failed;

	// flag indicating whether or not the server has gone away
	size_t server_gone_away;

	// flag indicating whether or not server has lost connection
	size_t server_lost_connection;

	// true / false if query has ran successfully
	size_t active;

	// true / false if connected
	size_t connected;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Behavior Flags %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// this will automatically retry lock timeouts (deadlocks)
	BP_BOOL restart_lock_timeout_transactions;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Connection Credentials %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// The following variables are set when a connect occurs within
	// a session.

	// Hostname of the server:
	char *host;

	// Name of the database we've connected to:
	char *db;

	// Username used to connect with:
	char *user;

	// Password of the user (this is stored for reconnection, can be
	// removed/mangled/disabled if you don't want to have blockparty
	// handle any reconnection):
	char *pass;

	// MySQL tcp port to connect on
	size_t port;
	
	
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Thread Information %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// If this connection was used in a thread, this variable can be
	// set to indicate so.
	BP_BOOL called_from_pthread;

	// If this was called from a pthread, this will be the thread structure.
	pthread_t thread_id;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Error Information %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// indicator for deadlock messages
	BP_BOOL last_query_resulted_in_deadlock;

	// indicator for syntax errors
	BP_BOOL last_query_resulted_in_syntax_error;

	// if this flag is set to true, errors will be displayed immediately after they are added
	BP_BOOL display_errors_immediately;

	// error stack associated with this connection
	P_BP_MYSQL_ERROR errors;

	// number of errors in the structure
	size_t error_n;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Multi-Query Utilities %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// multiquery results (stored via BP_MySQLStoreResultsMulti(P_BP_MYSQL_SESSION mysqlSession))
	MYSQL_RES *multi_results;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %% Members Pertaining to Prepared Statements %%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	// mysql prepared statements (added 2010)
	MYSQL_TIME  ts;

	// mysql statement
	MYSQL_STMT  *stmt;

	// the last sql query prepared (used for debugging purposes, just so you
	// can visualize what query was actually used)
	char * last_sql_prepared;


	// Binded (bound) arguments which are passed in from BP_MySQLBindParameters (this is not destroyed, this is just a pointer to outside
	// results which are likely allocated on the stack.)
	MYSQL_BIND  *bind_parameters_external_ptr;

	// Binded (bound) results which are passed in from BP_MySQLBindResult (this is not destroyed, this is just a pointer to outside
	// results which are likely allocated on the stack.)  If bind results are passed in with null data pointers, for the sake of auto
	// allocation, parameters are generated using the result_buffer_auto_allocator tailqueue allocator found within this structure.
	MYSQL_BIND  *bind_results_external_ptr;

	// number of elements in the results (row count, incremented when rows are fetched)
	size_t bind_results_external_ptr_elem_n;

	// bind result external column count
	size_t bind_results_external_column_count;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Result Auto Allocation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Note: Added in 2015 so that we can automatically allocate results that
	//       have been passed in as NULL.

	// this is a simple tailqueue allocator
	P_BP_LINKL result_buffer_auto_allocator;


} BP_MYSQL_SESSION, *P_BP_MYSQL_SESSION;


// mysql result structure
typedef struct _BP_MYSQL_RESULT {

	// mysql library result set structure
	MYSQL_RES *set;

	// number of fields in the result set
	int numFields;

} BP_MYSQL_RESULT, *P_BP_MYSQL_RESULT;


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Open Connection / Close Connection %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// MySQL Connect Bindings, destroys structures and information
P_BP_MYSQL_SESSION BP_MySQLConnect(char *mysqlHost, char *mysqlUser, char *mysqlPass, char *mysqlDB, size_t port);


// destroys structures and closes connection
BP_ERROR_T BP_MySQLClose(P_BP_MYSQL_SESSION mysqlSession);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Thread Safety / Locks %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// lock to ensure no other items can use the session (IF LOCKED, UNLOCKE REQUIRED)
BP_ERROR_T BP_MySQLSemLock  (P_BP_MYSQL_SESSION mysqlSession);

// unlocks a session
BP_ERROR_T BP_MySQLSemUnlock(P_BP_MYSQL_SESSION mysqlSession);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Thread Utilities %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// This can be called from within a pthread
BP_ERROR_T BP_MySQLMarkSessionAsPThread(P_BP_MYSQL_SESSION mysqlSession);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Utility / General Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// MySQL Query Bindings
// Use With null terminated strings only, results are accessed through struct MYSQL pointer
int BP_MySQLQuery(P_BP_MYSQL_SESSION mysqlSession, char * str);

// Binary safe version, string must mach length in length, results are accessed through struct MYSQL pointer.  
int BP_MySQLRealQuery(P_BP_MYSQL_SESSION mysqlSession, char * str, unsigned long length);

// Returns stored results after a query, NULL on failure
P_BP_MYSQL_RESULT BP_MySQLStoreResult(P_BP_MYSQL_SESSION mysqlSession);

// Returns a result set from a query 
MYSQL_ROW BP_MySQLFetchRow(P_BP_MYSQL_RESULT result, P_BP_MYSQL_SESSION mysqlSession = NULL);

// returns the length array corresponding to the MYSQL_ROW returned from FetchRow
unsigned long * BP_MySQLFetchLengths(P_BP_MYSQL_RESULT result, P_BP_MYSQL_SESSION mysqlSession = NULL);

// Create New Database: Non-depreciated CREATE DATABASE style
BP_ERROR_T BP_MySQLCreateDB(P_BP_MYSQL_SESSION mysqlSession, char *dbName);



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Multistatement Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// runs a stack of queries and removes results, parsing them into the correct
// storage syntax.  YOU NEED TO USE THIS FUNCTION IF IT"S A MULTI QUERY, OR ELSE.
BP_ERROR_T BP_MySQLQueryMulti(P_BP_MYSQL_SESSION mysqlSession, char *query);



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Error Stacks %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Adds error information to an existing mysql session.  Provide a valid
// mysql session, and relevant parameters, and you can set dynamic errors
// to your mysql session.
BP_ERROR_T BP_MySQLAddErr
(
	P_BP_MYSQL_SESSION mysqlSession,
	BP_MYSQL_ERROR_T   err_type,
	size_t             err_number,
	char *             error_string,
	BPLN_PARMS
);

// Display mysql errors.
BP_ERROR_T BP_MySQLDisplayErrors(P_BP_MYSQL_SESSION mysqlSession, BP_MYSQL_ERROR_T display_error_type);

// Display a single mysql error.
BP_ERROR_T BP_MySQLDisplayError(P_BP_MYSQL_ERROR error_data);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Prepared Statements %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// prepare mysql query
MYSQL_STMT * BP_MySQLPrepareQuery(P_BP_MYSQL_SESSION mysqlSession, char *sql);

// bind parameters to a mysql stmt
BP_ERROR_T BP_MySQLBindParameters(MYSQL_STMT *stmt, MYSQL_BIND *params, P_BP_MYSQL_SESSION mysqlSession);

// execute prepared statement
BP_ERROR_T BP_MySQLExecuteStatement(MYSQL_STMT * stmt, P_BP_MYSQL_SESSION mysqlSession);

// Stub function: returns last auto_increment id from an insert/update
my_ulonglong BP_MySQLLastInsertId(MYSQL_STMT*stmt);

// bind results
BP_ERROR_T BP_MySQLBindResult(MYSQL_STMT *stmt, MYSQL_BIND * results, size_t result_column_count, P_BP_MYSQL_SESSION mysqlSession);

// store results (optional, download results from db before fetching)
BP_ERROR_T BP_MySQLStoreResults(MYSQL_STMT * stmt, P_BP_MYSQL_SESSION mysqlSession);

// Fetch result
BP_ERROR_T BP_MySQLFetchResult(MYSQL_STMT * stmt, P_BP_MYSQL_SESSION mysqlSession);

// Destroy result
BP_ERROR_T BP_MySQLFreeResult(MYSQL_STMT *stmt, P_BP_MYSQL_SESSION mysqlSession);

// close mysql statement
BP_ERROR_T BP_MySQLCloseStatement(MYSQL_STMT *stmt, P_BP_MYSQL_SESSION mysqlSession);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Utility Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// This routine attempts to convert types found within the enum_field_types
// enumerator found within mysql_com.h, into actual strings.  This allows
// them to be easily displayed via routines such as BP_MySQLPrintBindArray above.
// The returned string must be bpfreed when you're done with it.
char * BP_MySQLTypeToString(size_t mysql_type_enum_value);

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Display Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// display bind parameters (utility)
BP_ERROR_T BP_MySQLPrintBindArray(MYSQL_BIND *bind_arr, size_t element_count);

// display a mysql session
void BP_MySQLDisplaySession(P_BP_MYSQL_SESSION mysqlSession);



#endif /*BPDBMYSQL_H_*/
