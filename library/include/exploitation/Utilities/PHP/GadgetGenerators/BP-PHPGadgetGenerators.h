#ifndef __BP_PHP_GADGET_GENERATORS_H
#define __BP_PHP_GADGET_GENERATORS_H

/*
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * %%% PHP Gadget Generation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 *
 * PHP Compromise is a many natured thing, and as such requires
 * a large number of custom gadgets.  These gadgets can be used
 * for the purpose of creating specific gadgets that are PHP specific
 * for any specific purpose.
 *
 * Document Author: Jason A. Medeiros
 *
 */


// This structure is used to provide dynamic arguments to a PHP
// gadget.  This allows fot the generation of modular runtime
// substitution capabilities.
typedef struct __BP_PHP_GADGET_ARG {

	// type indicator for gadget substitution purposes (allows the
	// substitution routine to determine proper encoding for substituted
	// values.
	BP_GADGET_ARG_TYPE type;

	// symbol that this argument will be replace with
	char *arg_php_symbol;

	// flag indicating whether or not the argument has been set, either BP_TRUE or BP_FALSE
	uint8_t arg_has_been_set;

	// flag indicating whether or not arguement is mandatory
	uint8_t arg_required_for_run;

	// actual argument
	unsigned char * arg;

	// size of the argument, in bytes
	size_t size;

} BP_PHP_GADGET_ARG, *P_BP_PHP_GADGET_ARG;



// This is the structure used for representing any PHP
// gadget.  It contains identification information, as well
// as more defined components.
typedef struct __BP_PHP_GADGET {


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Gadget Identification Information %%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// the category the gadget falls under
	BP_GADGET_CAGETORY category;

	// type of gadget
	BP_GADGET_TYPE type;

	// Supported software languages (PHP4 PHP5 etc).  Null ptr terminated
	// array.
	BP_GADGET_SOFTWARE_LANGUAGE  *langs;
	size_t                        langs_n;

	// Supported hw platforms, NULL terminated.
	BP_GADGET_HW_PLATFORM 		*hw_platforms;
	size_t                  	hw_platforms_n;

	// Supported os targets, NULL terminated.
	BP_GADGET_OS_TARGET         *os_targets;
	size_t                		os_targets_n;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% User / Developer Defined ID Strings %%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// unique uuid value for the gadget
	char *uuid;

	// name of the gadget
	char *name;

	// description of the gadget
	char *description;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Gadget Implementation Details %%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// contents of the actual gadget
	char * gadget_fmt;

	// output mapping of variables to expected output data (must match
	// code output values)
	char **output_map;
	size_t output_map_n;

	// This matrix is used for var randomization/anonymizing during
	// run time creation.
	char ** var_randomization_matrix;
	size_t  var_randomization_matrix_n;

	// key to unlock the gadget (both locally and server side)
	char *read_key;
	char *write_key;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Gadget Runtime Information %%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// tail queue allocator used for holding runtime
	// generated information.
	P_BP_LINKL runtime_tq;

	// This is the final prepared gadget body.  It is generated by
	// calling the gadget preprocessor.
	char * prepared_gadget;

	// runtime substitution arguments provided by user
	P_BP_PHP_GADGET_ARG arguments;
	size_t              arguments_n;

	// boolean flag for indicating whether or not a user has configured
	// this gadget correctly for use.
	size_t configured_for_runtime_use;

} BP_PHP_GADGET, *P_BP_PHP_GADGET;


// holds a library of php gadgets
typedef struct __BP_PHP_GADGET_LIBRARY {

	// tail queue allocator
	P_BP_LINKL tq;

	// individual gadgets in the library
	P_BP_PHP_GADGET gadgets;

	// full count of loaded gadgets
	size_t gadget_n;

} BP_PHP_GADGET_LIBRARY, *P_BP_PHP_GADGET_LIBRARY;


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Predefined Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// set this to the number of predefined gadgets available
// in the library.
#define BP_PHP_PREDEFINED_GADGET_COUNT 128


/* SEE SOURCE CC FILE FOR INDIVIDUAL GADGET DEFINITIONS */
BP_ERROR_T BP_PHPGeneratePredefinedGadgets(P_BP_PHP_GADGET_LIBRARY open_gadget_lib);

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Gadget Library Related Routines %%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// builds a gadget library from the existing library gadgets
P_BP_PHP_GADGET_LIBRARY BP_PHPOpenGadgetLibrary();

// destroys a open PHP gadget library
BP_ERROR_T BP_PHPCloseDestroyGadgetLibrary(P_BP_PHP_GADGET_LIBRARY gadget_lib);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Gadget Related Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// linear search through php gadgets to search by string.  String searching
// should be pretty fast.
P_BP_PHP_GADGET BP_PHPGadgetSearchByString
(
		P_BP_PHP_GADGET_LIBRARY gadget_lib,
		char *uuid,
		char *name,
		char *description
);


// PHP gadget run time arguments are added during gadget definition.  They
// can be set directly by using this function.
BP_ERROR_T BP_PHPGadgetSetRuntimeArgument
(
	P_BP_PHP_GADGET        gadget,
	char                   *arg_php_symbol,
	unsigned char          *arg,
	size_t                 arg_size
);

// adds arguments to a gadget
BP_ERROR_T BP_PHPGadgetAddRuntimeArgument
(
		P_BP_PHP_GADGET        gadget,
		BP_GADGET_ARG_TYPE type,
		char                   *arg_php_symbol
);

// generates a gadget suitable for sending towards stage 2 interpreter for decode/execution
P_BP_PHP_GADGET BP_PHPGenerateGadget(char * gadget_text, char *encryption_key);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Gadget Preprocessor %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// The gadget preprocessor generates runtime substitutions based on the
// defined argument configuration of the gadget supplied.  This includes
// creating random elements as necessary.
BP_ERROR_T BP_PHPGadgetPreprocessor(P_BP_PHP_GADGET gadget);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Display Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// displays a php gadget library
BP_ERROR_T BP_DisplayPHPGadgetLibrary(P_BP_PHP_GADGET_LIBRARY open_gadget_lib, size_t display_gadgets);

// gadget display routine
BP_ERROR_T BP_DisplayPHPGadget(P_BP_PHP_GADGET gadget);

#endif /* __BP_PHP_GADGET_GENERATORS_H */
