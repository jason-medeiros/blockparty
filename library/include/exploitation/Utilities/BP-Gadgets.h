#ifndef __BP_GADGETS_H
#define __BP_GADGETS_H

// Every gadget must be assigned to a category.  All gadgets
// are either part of a loader, a mapper, a writer, or backdoor.
typedef size_t BP_GADGET_CAGETORY;
typedef enum BP_GADGET_CAGETORY_ENUM {
	BP_GADGET_CATEGORY_UNSET,
	BP_GADGET_CATEGORY_LOADER,
	BP_GADGET_CATEGORY_MAPPER,
	BP_GADGET_CATEGORY_WRITER,
	BP_GADGET_CATEGORY_BACKDOOR
};

// Each gadget must also have a gadget type.  These
// types provide a rough estimation of the purpose
// of the particular gadget being used.
typedef unsigned int BP_GADGET_TYPE;
typedef enum BP_GADGET_TYPE_ENUM {
	BP_GADGET_TYPE_UNSET,
	BP_GADGET_TYPE_OBFUSCATOR,
	BP_GADGET_TYPE_OUTPUT_MAPPER,
	BP_GADGET_TYPE_SYSTEM_INFO,
	BP_GADGET_TYPE_PERMISSION_DETERMINATION,
	BP_GADGET_TYPE_DOWNLOAD_AND_EXECUTE,
	BP_GADGET_TYPE_TROJAN_FILE,
	BP_GADGET_TYPE_INTERACTIVE_SYSTEM_SHELL,
	BP_GADGET_TYPE_INTERACTIVE_LANGUAGE_SHELL,
	BP_GADGET_TYPE_DATABASE_INFO,
	BP_GADGET_TYPE_DATABASE_DUMP,
	BP_GADGET_TYPE_DATABASE_ANALYSIS
};

// This is an indicator defining what language the gadget
// was written in.
typedef size_t BP_GADGET_SOFTWARE_LANGUAGE;
typedef enum BP_GADGET_SOFTWARE_LANGUAGE_ENUM {
	BP_GADGET_SOFTWARE_LANGUAGE_UNSET,
	BP_GADGET_SOFTWARE_LANGUAGE_PHP4,
	BP_GADGET_SOFTWARE_LANGUAGE_PHP5,
	BP_GADGET_SOFTWARE_LANGUAGE_PERL,
	BP_GADGET_SOFTWARE_LANGUAGE_RUBY,
	BP_GADGET_SOFTWARE_LANGUAGE_BASH,
	BP_GADGET_SOFTWARE_LANGUAGE_SH,
	BP_GADGET_SOFTWARE_LANGUAGE_ASH,
	BP_GADGET_SOFTWARE_LANGUAGE_CSH,
	BP_GADGET_SOFTWARE_LANGUAGE_JSP,
	BP_GADGET_SOFTWARE_LANGUAGE_CFM,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_GENERIC,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_CHROME,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_FIREFOX,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_INTERNET_EXPLORER,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_OPERA,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SAFARI,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_WEBKIT,
	BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SELENIUM,
	BP_GADGET_SOFTWARE_LANGUAGE_HTML,
	BP_GADGET_SOFTWARE_LANGUAGE_PGSQL,
	BP_GADGET_SOFTWARE_LANGUAGE_MYSQL,
	BP_GADGET_SOFTWARE_LANGUAGE_ORACLE,
	BP_GADGET_SOFTWARE_LANGUAGE_LISP,
	BP_GADGET_SOFTWARE_LANGUAGE_LUA,
	BP_GADGET_SOFTWARE_LANGUAGE_C,
	BP_GADGET_SOFTWARE_LANGUAGE_CPP,
	BP_GADGET_SOFTWARE_LANGUAGE_X86_32_ASM,
	BP_GADGET_SOFTWARE_LANGUAGE_X86_64_ASM,
	BP_GADGET_SOFTWARE_LANGUAGE_X86_32_BINCODE,
	BP_GADGET_SOFTWARE_LANGUAGE_X86_64_BINCODE,
	BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_ASM,
	BP_GADGET_SOFTWARE_LANGUAGE_ARM_64_ASM,
	BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_BINCODE,
	BP_GADGET_SOFTWARE_LANGUAGE_ARM_64_BINCODE
};

// This defines the gadget hardware platform target and provides a tiny
// bit of inference into the platform being targeted.
typedef size_t BP_GADGET_HW_PLATFORM;
typedef enum BP_GADGET_HW_PLATFORM_ENUM {
	BP_GADGET_HW_PLATFORM_UNSET,
	BP_GADGET_HW_PLATFORM_ANY,
	BP_GADGET_HW_PLATFORM_ANDROID_ARM_64,
	BP_GADGET_HW_PLATFORM_ANDROID_X86_32,
	BP_GADGET_HW_PLATFORM_ANDROID_X86_64,
	BP_GADGET_HW_PLATFORM_OSX_X86_32,
	BP_GADGET_HW_PLATFORM_OSX_X86_64,
	BP_GADGET_HW_PLATFORM_iOS_ARM_32,
	BP_GADGET_HW_PLATFORM_iOS_ARM_64,
	BP_GADGET_HW_PLATFORM_WIN_X86_32,
	BP_GADGET_HW_PLATFORM_WIN_X86_64,
	BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_32,
	BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_64,
	BP_GADGET_HW_PLATFORM_OPEN_BSD_X86_32,
	BP_GADGET_HW_PLAtFORM_OPEN_BSD_X86_64,
	BP_GADGET_HW_PLATFORM_FREE_BSD_X86_32,
	BP_GADGET_HW_PLATFORM_FREE_BSD_X86_64,
	BP_GADGET_HW_PLATFORM_NET_BSD_X86_32,
	BP_GADGET_HW_PLATFORM_NET_BSD_X86_64,
	BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_32,
	BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_64
};

// Gadget operating system taget.
typedef size_t BP_GADGET_OS_TARGET;

typedef enum BP_GADGET_OS_TARGET_ENUM {
	BP_GADGET_OS_TARGET_UNSET,
	BP_GADGET_OS_TARGET_ANY,
	BP_GADGET_OS_TARGET_UBUNTU_6,
	BP_GADGET_OS_TARGET_UBUNTU_7,
	BP_GADGET_OS_TARGET_UBUNTU_8,
	BP_GADGET_OS_TARGET_UBUNTU_9,
	BP_GADGET_OS_TARGET_UBUNTU_10,
	BP_GADGET_OS_TARGET_UBUNTU_11,
	BP_GADGET_OS_TARGET_UBUNTU_12,
	BP_GADGET_OS_TARGET_UBUNTU_13,
	BP_GADGET_OS_TARGET_UBUNTU_14,
	BP_GADGET_OS_TARGET_UBUNTU_15,
	BP_GADGET_OS_TARGET_UBUNTU_16,
	BP_GADGET_OS_TARGET_RHEL_2_1,
	BP_GADGET_OS_TARGET_RHEL_3,
	BP_GADGET_OS_TARGET_RHEL_4,
	BP_GADGET_OS_TARGET_RHEL_5,
	BP_GADGET_OS_TARGET_RHEL_6,
	BP_GADGET_OS_TARGET_RHEL_7,
	BP_GADGET_OS_TARGET_RHEL_8,
	BP_GADGET_OS_TARGET_RHEL_9,
	BP_GADGET_OS_TARGET_FEDORA_1,
	BP_GADGET_OS_TARGET_FEDORA_2,
	BP_GADGET_OS_TARGET_FEDORA_3,
	BP_GADGET_OS_TARGET_FEDORA_4,
	BP_GADGET_OS_TARGET_FEDORA_5,
	BP_GADGET_OS_TARGET_FEDORA_6,
	BP_GADGET_OS_TARGET_FEDORA_7,
	BP_GADGET_OS_TARGET_FEDORA_8,
	BP_GADGET_OS_TARGET_FEDORA_9,
	BP_GADGET_OS_TARGET_FEDORA_10,
	BP_GADGET_OS_TARGET_FEDORA_11,
	BP_GADGET_OS_TARGET_FEDORA_12,
	BP_GADGET_OS_TARGET_FEDORA_13,
	BP_GADGET_OS_TARGET_FEDORA_14,
	BP_GADGET_OS_TARGET_FEDORA_15,
	BP_GADGET_OS_TARGET_FEDORA_16,
	BP_GADGET_OS_TARGET_FEDORA_17,
	BP_GADGET_OS_TARGET_FEDORA_18,
	BP_GADGET_OS_TARGET_FEDORA_19,
	BP_GADGET_OS_TARGET_FEDORA_20,
	BP_GADGET_OS_TARGET_FEDORA_21,
	BP_GADGET_OS_TARGET_FEDORA_22,
	BP_GADGET_OS_TARGET_FEDORA_23,
	BP_GADGET_OS_TARGET_FEDORA_24,
	BP_GADGET_OS_TARGET_DEBIAN_1_1,
	BP_GADGET_OS_TARGET_DEBIAN_1_2,
	BP_GADGET_OS_TARGET_DEBIAN_1_3,
	BP_GADGET_OS_TARGET_DEBIAN_2,
	BP_GADGET_OS_TARGET_DEBIAN_2_1,
	BP_GADGET_OS_TARGET_DEBIAN_2_2,
	BP_GADGET_OS_TARGET_DEBIAN_3,
	BP_GADGET_OS_TARGET_DEBIAN_3_1,
	BP_GADGET_OS_TARGET_DEBIAN_4,
	BP_GADGET_OS_TARGET_DEBIAN_5,
	BP_GADGET_OS_TARGET_DEBIAN_6,
	BP_GADGET_OS_TARGET_DEBIAN_7,
	BP_GADGET_OS_TARGET_DEBIAN_8,
	BP_GADGET_OS_TARGET_DEBIAN_9,
	BP_GADGET_OS_TARGET_DEBIAN_10,
	BP_GADGET_OS_TARGET_WIN_7,
	BP_GADGET_OS_TARGET_WIN_8,
	BP_GADGET_OS_TARGET_WIN_8_1,
	BP_GADGET_OS_TARGET_WIN_9,
	BP_GADGET_OS_TARGET_WIN_VISTA,
	BP_GADGET_OS_TARGET_WIN_XP,
	BP_GADGET_OS_TARGET_WIN_ME,
	BP_GADGET_OS_TARGET_WIN_98,
	BP_GADGET_OS_TARGET_WIN_NT4,
	BP_GADGET_OS_TARGET_WIN_95,
	BP_GADGET_OS_TARGET_WIN_3_1
};


// This enum specifies the different data types
// which can be assigned in gadgets.

// enumerator which wraps argument substitution types
typedef size_t BP_GADGET_ARG_TYPE;
typedef enum BP_GADGET_ARG_TYPE_ENUM {
	BP_GADGET_ARG_TYPE_UNSET,
	BP_GADGET_ARG_TYPE_CHAR_STRING,
	BP_GADGET_ARG_TYPE_UCHAR_STRING,
	BP_GADGET_ARG_TYPE_UINT64,
	BP_GADGET_ARG_TYPE_UINT32,
	BP_GADGET_ARG_TYPE_UINT16,
	BP_GADGET_ARG_TYPE_UINT8,
	BP_GADGET_ARG_TYPE_INT64,
	BP_GADGET_ARG_TYPE_INT32,
	BP_GADGET_ARG_TYPE_INT16,
	BP_GADGET_ARG_TYPE_INT8
};



// main gadget structure
typedef struct __BP_GADGET {


	// gadget type (from above enumerator)
	BP_GADGET_TYPE type;

	// language of software being targeted (perl/php/etc)
	BP_GADGET_SOFTWARE_LANGUAGE sw_lang;

	// hardware platform for the gadget created
	BP_GADGET_HW_PLATFORM hw_platform;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Gadget Library %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Opaque typed pointer to the generated gadget.
	void * gadget;

} BP_GADGET, *P_BP_GADGET;



// A gadget library is used to house multiple gadgets together for easy
// searching and manipulation.
typedef struct __BP_GADGET_LIBRARY {

	// total number of gadgets in the library
	size_t num_gadgets;

	// loaded gadgets
	P_BP_GADGET gadgets;

	// tail queue allocator (used for all library allocations)
	P_BP_LINKL tq;

} BP_GADGET_LIBRARY, *P_BP_GADGET_LIBRARY;


// Builds a gadget library based on a stack of item parameters provided.  If
// a provided parameter is a null pointer, this adds ALL items to the library.
P_BP_GADGET_LIBRARY BP_BuildGadgetLibrary
(
		BP_GADGET_TYPE              * types,
		BP_GADGET_SOFTWARE_LANGUAGE * languages,
		BP_GADGET_HW_PLATFORM       * hw_platform

);

// Destroys a gadget library
BP_ERROR_T BP_DestroyGadgetLibrary(P_BP_GADGET_LIBRARY lib);

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Gadget Display Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Displays a gadget.
BP_ERROR_T BP_DisplayGadget(P_BP_GADGET gadget);

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Enum 2 String Functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// The following functions are used to translate enumerator values
// to string values.  This facility is used mainly for the purpose
// of visualizing current values occupied within existing gadgets.

// BP_GADGET_OS_TARGET to heap alloc string.
char * BP_GetOSTarget(BP_GADGET_OS_TARGET os_target, P_BP_LINKL tq);

// BP_GADGET_HW_PLATFORM to heap alloc string.
char * BP_GetHWPlatform(BP_GADGET_HW_PLATFORM hw_platform, P_BP_LINKL tq);

// BP_GADGET_SOFTWARE_LANGUAGE to heap alloc string.
char * BP_GetSoftwareLanguage(BP_GADGET_SOFTWARE_LANGUAGE software_language, P_BP_LINKL tq);

// BP_GADGET_TYPE to heap alloc string.
char * BP_GetGadgetType(BP_GADGET_TYPE type, P_BP_LINKL tq);

// BP_GADGET_CAGETORY to heap alloc string.
char * BP_GetGadgetCategory(BP_GADGET_CAGETORY category, P_BP_LINKL tq);

// returns a gadget argument type, allocated via tail queue allocator.
char * BP_GetGadgetArgumentType(BP_GADGET_ARG_TYPE type, P_BP_LINKL tq);

// BP_GADGET_ARG_TYPE_ENUM
#endif /* __BP_GADGETS_H */
