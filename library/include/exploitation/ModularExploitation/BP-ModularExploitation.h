/*
 * The modular exploitation subsystem within blockparty is used for the purpose of loading,
 * manipulating, iterating, and executing individual exploits.  This code is simple to use, and
 * does not require exploits to be written into the library itself, but instead they are created
 * and loaded through individual modules written by various project developers.
 *
 * This code works purely in C, and much like the other capacities build into this library, this
 * code operates on the premise of sessions.
 */

#ifndef __BP_MODULAR_EXPLOITATION_H
#define __BP_MODULAR_EXPLOITATION_H

typedef enum BP_MODULAR_EXPLOITATION_SESSION_STATUS {
	BP_MODULAR_EXPLOITATION_SESSION_UNSET,
	BP_MODULAR_EXPLOITATION_SESSION_ENABLED,
	BP_MODULAR_EXPLOITATION_SESSION_DISABLED
};

typedef enum BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS {
	BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS_UNSET,
	BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS_RUNNING,
	BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS_PENDING,
	BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS_PAUSED,
	BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS_STOPPED
};


// forward definition of the exploitation session structure
typedef struct __BP_MODULAR_EXPLOITATION_SESSION;

// forward definition of the exploit compromise indictator
typedef struct __BP_MODLULAR_EXPLOITATION_COMPROMISE_INDICATOR;




// Network targeting structure used by the modular exploitation system.  The data
// within this structure is used dynamically by exploit modules, to their fit.
typedef struct __BP_MODULAR_EXPLOITATION_NETWORK_TARGET {


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% database IDs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// if the target was pulled from the nmap db, this id will
	// represent the host entry.
	size_t nmap_db_id;

	// these can be set if the data below was pulled from the
	// result database.
	size_t result_id;
	size_t base_id;
	size_t path_id;
	size_t script_id;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Extrapolated Target Data %%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// NULL values, are unset.  To test if an item is available, just check to see
	// if a pointer is allocated below.

	// a MAC address
	char *mac_addr;

	// an ipv6 address
	char *ipv6_addr;

	// an ipv4 address
	char *ipv4_addr;

	// a DNS host name to use
	char *hostname;

	// web result base data: aka http://blah.com/
	char *base;

	// web result path data: aka http://blah.com/blah/
	char *path;

	// web result script data: aka http://blah.com/blah/blah.php
	char *script;

	// web result entry: aka http://blah.com/blah/blah.php?what=what
	char *result;

	// SMB share
	char *smb_share;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%% Port Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// udp ports known to be open on this host
	size_t * udp_ports;
	size_t   udp_port_n;

	// tcp ports known to be open on this target
	size_t * tcp_ports;
	size_t * tcp_port_n;


} BP_MODULAR_EXPLOITATION_NETWORK_TARGET, *P_BP_MODULAR_EXPLOITATION_NETWORK_TARGET;


// determines run status
typedef enum BP_EXPLOIT_MODULE_STATUS
{
	BP_EXPLOIT_MODULE_STATUS_UNSET,
	BP_EXPLOIT_MODULE_STATUS_UNINITIALIZED,
	BP_EXPLOIT_MODULE_STATUS_INITIALIZED
};

// enumerator for fast-deteremining module run status
typedef enum BP_EXPLOIT_MODULE_RUN_STATUS {
	BP_EXPLOIT_MODULE_RUN_STATUS_UNSET,
	BP_EXPLOIT_MODULE_RUN_STATUS_IDLE,
	BP_EXPLOIT_MODULE_RUN_STATUS_LOAD,
	BP_EXPLOIT_MODULE_RUN_STATUS_UNLOAD,
	BP_EXPLOIT_MODULE_RUN_STATUS_RELOAD,
	BP_EXPLOIT_MODULE_RUN_STATUS_ASSESSING_TARGET,
	BP_EXPLOIT_MODULE_RUN_STATUS_FIRING,
	BP_EXPLOIT_MODULE_RUN_STATUS_DB_REPORT
};

//  A modular exploitation system is comprised of exploit modules loaded into
//  a modular exploitation session.  The session handles the aggregation of
//  loaded targets, as well as the provision of data to individual exploit
//  modules.  The module structure below must contain valid referential pointers
//  as well as valid module-author defined function pointers.

typedef struct __BP_EXPLOIT_MODULE {

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Run Status Indicators %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// current module status
	BP_EXPLOIT_MODULE_STATUS mod_status;

	// current run status for module (for identifying firing position etc)
	BP_EXPLOIT_MODULE_RUN_STATUS mod_run_status;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Basic Exploit Module Information %%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// module name (string)
	char * name;

	// module major version
	size_t major_version;

	// module minor version
	size_t minor_version;

	// proxy safe
	size_t exploit_was_designed_for_proxy_safety;

	// Custom configuration items passed in as a set of
	// opaque parameters.  Module must know how to typecast
	// this data in order for the module to make use of this.
	void * mod_user_arguments;

    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%% Self Referential Structure Pointers %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// pointer to the current module (aka this structure)
	__BP_EXPLOIT_MODULE * current_module;

	// pointer to the current session this module is loaded as part of
	__BP_MODULAR_EXPLOITATION_SESSION * current_session;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Module Splinter Inforamation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// number of currently dispatched splinters
	size_t splinters_n;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%% Module Function Pointers / Custom Routines %%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// this is called when the exploit module is loaded, the argument
	// to this function is always a pointer to this structure.

	// exploit initialization routine
	BP_ERROR_T (* exploit_init_fn)(void *);

	// this selects a target from the current set of targets
	BP_ERROR_T (* exploit_load_fn)(void *);

	// this unloads a target from the current set of targets without firing
	BP_ERROR_T (* exploit_unload_fn)(void *);

	// this function is used for retargeting calculations
	BP_ERROR_T (* exploit_retarget_fn)(void *);

	// This function is called to assess targets, this is similar to what
	// a vulnerability scanner would do.  No direct targeting.
	BP_ERROR_T (* exploit_assess_target_fn)(void *);

	// Using the existing current configuration, this actually
	// sends the exploit + payload
	BP_ERROR_T (* exploit_fire_fn)(void *);

	// This function is used for the purposes of database reporting.
	BP_ERROR_T (* exploit_db_report_fn)(void *);

	// This function is called when extended module information is requested
	// for display.  It is used for per-module, custom reporting.
	BP_ERROR_T (* exploit_custom_print_report_fn)(void *);

} BP_EXPLOIT_MODULE, *P_BP_EXPLOIT_MODULE;


// Exploitation success indicators are important for determining what
// exploits have achieved what level of target compromise.

typedef struct __BP_MODLULAR_EXPLOITATION_COMPROMISE_INDICATOR {

	// pointer to the module in question
	P_BP_EXPLOIT_MODULE module;

	// pointer to the target in question
	P_BP_MODULAR_EXPLOITATION_NETWORK_TARGET target;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%% Compromise Indication Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// boolean flag
	size_t target_was_compromised_using_module;

	// indicator stating that a shell was spawned
	size_t shell_was_spawned;

	// indicator stating that data was exfiltrated
	size_t data_was_exfiltrated;

	// string stack set by the exploit module
	char ** module_indicator_strings;

	// number of strings in the above stack
	size_t module_indicator_string_n;



} BP_MODLULAR_EXPLOITATION_COMPROMISE_INDICATOR, *P_BP_MODLULAR_EXPLOITATION_COMPROMISE_INDICATOR;


// Main mod-expl session structure.  Holds information regarding the status
// of an exploitation session.
typedef struct __BP_MODULAR_EXPLOITATION_SESSION {

	// provide a semaphore for locking the session so that
	// current
	sem_t session_lock;

	// mysql connection pool to associate with the session
	P_BP_MYSQL_CONN_POOL db_pool;

	// toggle for enabling or disabling the session (enabled/disabled)
	BP_MODULAR_EXPLOITATION_SESSION_STATUS enabled_status;

	// current running status (runing/paused/pending/stopped)
	BP_MODULAR_EXPLOITATION_SESSION_RUN_STATUS run_status;

	// random session id created when the session is generated
	size_t session_id;

	// tail queue allocator for the session (memory managment structure)
	P_BP_LINKL tq;




	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Exploit Modules Loaded in Session %%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	// stack of loaded modules (as a set of indexed pointers)
	P_BP_EXPLOIT_MODULE * modules;

	// number of exploits currently loaded
	size_t module_n;

	// lock for module manipulation
	sem_t module_manipulation_lock;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%% Targets Attached to the Current Session %%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// stack of retrieved and provisoned targets for this session to
	// work with.
	P_BP_MODULAR_EXPLOITATION_NETWORK_TARGET targets;

	// current number of targets
	size_t targets_n;

	// lock for target manipulation
	sem_t target_manipulation_lock;


} BP_MODULAR_EXPLOITATION_SESSION, *P_BP_MODULAR_EXPLOITATION_SESSION;


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%% Session Constructor and Deconstructor %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// Create a new session, initiates structure values, and sets an existing
// connection pool for use with the session.
P_BP_MODULAR_EXPLOITATION_SESSION BP_CreateNewModularExploitationSession
(
		P_BP_MYSQL_CONN_POOL db_pool
);

// Destroys ALL memory created within a session.
BP_ERROR_T BP_DestroyModularExploitationSession(P_BP_MODULAR_EXPLOITATION_SESSION session);



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%% Exploit Module Loader / Unloader %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// Load an exploit module into the current session
BP_ERROR_T BP_MELoadExploitModule
(
		P_BP_MODULAR_EXPLOITATION_SESSION session,
		P_BP_EXPLOIT_MODULE               module
);

// Load an exploit module into the current session
BP_ERROR_T BP_MEUnloadExploitModule
(
		P_BP_MODULAR_EXPLOITATION_SESSION session,
		P_BP_EXPLOIT_MODULE               module
);


// inits a provided exploit module within the modular exploitation session
BP_ERROR_T BP_MEInitExploitModule
(
		P_BP_MODULAR_EXPLOITATION_SESSION session,
		P_BP_EXPLOIT_MODULE               module,
		void                              *mod_user_arguments
);

// Runs one specific module within the session.  Creates the thread responsible for
// running the exploit.
BP_ERROR_T BP_MERunExploitModule
(
		P_BP_MODULAR_EXPLOITATION_SESSION session,
		P_BP_EXPLOIT_MODULE               module
);

// inits all modules within a system
BP_ERROR_T BP_MEInitExploitModules
(
		P_BP_MODULAR_EXPLOITATION_SESSION session
);

// runs all modules loaded (each module has it's own main thread and splinters)
BP_ERROR_T BP_MERunExploitModules
(
		P_BP_MODULAR_EXPLOITATION_SESSION session
);



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Display Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// displays the contents of a modular exploitation session
BP_ERROR_T BP_MEDisplaySession(P_BP_MODULAR_EXPLOITATION_SESSION session);

// displays extended module information found within a modular exploitation session
BP_ERROR_T BP_MEDisplaySessionExtendedModuleInformation(P_BP_MODULAR_EXPLOITATION_SESSION session);

#endif /* __BP_MODULAR_EXPLOITATION_H */
