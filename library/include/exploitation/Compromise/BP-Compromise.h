#ifndef __BP_COMPROMISE_H
#define __BP_COMPROMISE_H

/*
 *
 * Compromise Sessions:
 * ========================================================
 * A compromise session is a blockparty core component which is
 * used to attach to any variety of stage two handlers.  The handlers
 * listen for requests and process data, they return data to the
 * compromise session, which then stores the resultant output data to
 * either memory or disk, depending.
 *
 * The Compromise session capability works directly with the builtin
 * blockparty gadget library so that host information gathering can
 * be done fairly effortlessly.
 *
 */

// Each host which has been compromised is stored
// within this structure.
typedef struct __BP_COMPROMISED_HOST {

	// Operating system target associated with this host
	BP_GADGET_OS_TARGET target;

	// Hardware platform associated with this host
	BP_GADGET_HW_PLATFORM platform;

	// language to use when preparing gadgets
	BP_GADGET_SOFTWARE_LANGUAGE language;

	// %%%%%%%% Host Information %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// define the target host
	char * host;

	// define the target port
	unsigned short port;



	// %%%%%%%%% Gadget Stack %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Pointer to a gadget library associated with this compromised
	// host.
	P_BP_GADGET_LIBRARY gadget_library;


} BP_COMPROMISED_HOST, *P_BP_COMPROMISED_HOST;

typedef struct __BP_COMROMISE_SESSION {

	// hosts in the compromised session
	P_BP_COMPROMISED_HOST hosts;

	// number of hosts in the hosts stack
	size_t hosts_n;


} BP_COMPROMISE_SESSION, *P_BP_COMPROMISE_SESSION;

#endif // __BP_COMPROMISE_H
