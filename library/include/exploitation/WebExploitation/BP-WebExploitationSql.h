/*
 * BP-WebExploitationSql.h
 *
 *  Created on: Apr 3, 2009
 *      Author: root
 */

#ifndef BPWEBEXPLOITATIONSQL_H_
#define BPWEBEXPLOITATIONSQL_H_



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%% SQL INJECTION CAPABILITY %%%%%%%%%%%%%%%%%%%%%%%%%%%

// identifies which test set was utilized during creation
enum BP_SQLINJ_TEST_SET {
	BP_SQLINJ_TEST_SET_NONE,
	BP_SQLINJ_TEST_SET_STANDARD,
	BP_SQLINJ_TEST_SET_DUMMY,
	BP_SQLINJ_TEST_SET_USER_DEFINED,
	BP_SQLINJ_TEST_SET_INVALID
};


// SQL Injection Verification Policy: Verify injections or no injections
enum BP_SQLINJ_VERIFICATION_POLICY {
	BP_SQLINJ_NONE,
	BP_SQLINJ_VERIFY_CODE_EXEC,
	BP_SQLINJ_NO_VERIFICATION
};


// Attack levels which determine the the level of intrusiveness
// to utilize against a potential SQL injection vulnerability.
enum BP_SQLINJ_ATTACK_LEVEL {
	BP_SQLINJ_ATTACK_NONE,
	BP_SQLINJ_ATTACK_SAFE,
	BP_SQLINJ_ATTACK_UNSAFE,
	BP_SQLINJ_ATTACK_ALL
};


// SQL Injection Test Structure
typedef struct _BP_WEB_SQLINJ_TEST {

	// the front of the test condition
	char *testFront;

	// the end of the test condition
	char *testTail;

	// Exploit type
	BP_WEB_EXPLOIT_TEST_TYPE type;

	// Verification policy
	BP_SQLINJ_VERIFICATION_POLICY policy;

	// Attack Level (legally safe or unsafe)
	BP_SQLINJ_ATTACK_LEVEL attackLevel;

} BP_WEB_SQLINJ_TEST, *P_BP_WEB_SQLINJ_TEST;


// Used to determine how much of a match has been made
enum BP_WEB_SQLINJ_MATCH_RESULT {
	BP_WEB_SQLINJ_MATCH_NONE,
	BP_WEB_SQLINJ_MATCH_FULL,
	BP_WEB_SQLINJ_MATCH_PARTIAL
};

// is the target an anchor or form
enum BP_SQLINJ_TARGET_TYPE {
	BP_SQLINJ_TARGET_TYPE_NONE,
	BP_SQLINJ_TARGET_TYPE_ANCHOR,
	BP_SQLINJ_TARGET_TYPE_FORM,
	BP_SQLINJ_TARGET_TYPE_COOKIE
};

// SQL Engine Detection
enum BP_SQLINJ_ENGINE {
	BP_SQLINJ_ENGINE_NONE,
	BP_SQLINJ_ENGINE_MYSQL,
	BP_SQLINJ_ENGINE_MSQL,
	BP_SQLINJ_ENGINE_POSTGRES,
	BP_SQLINJ_ENGINE_ORACLE,
	BP_SQLINJ_ENGINE_ODBC
};

// Test results structure for SQL Injections
typedef struct _BP_WEB_SQLINJ_TEST_RESULT {

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Request Data Structure %%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// request data
	BP_WEB_ANALYSIS_BASIC_REQUEST_DATA request_data;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% General Result Information %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// SQL Injection Test Index
	size_t testIndex;

	// target type (anchor, form, or cookie)
	BP_SQLINJ_TARGET_TYPE targetType;


	// ----- SQL Engine Detection --------------------


	// Based around the error messages provided, this represents
	// the most likely backend sql engine candidate.
	BP_SQLINJ_ENGINE * enginesDetected;

		// number of total engines detected
		size_t engineDetectionCount;


	// number of UNIQUE mysql matches made
	size_t mysqlTestMatchesMade;

		// array of test index matches which were found
		size_t *mysqlTestMatchIndexes;


	// number of UNIQUE msql matches made
	size_t msqlTestMatchesMade;

		// array of test index matches which were found
		size_t *msqlTestMatchIndexes;


	// number of UNIQUE postgres matches made
	size_t pgsqlTestMatchesMade;

		// array of test index matches which were found
		size_t *pgsqlTestMatchIndexes;


	// number of UNIQUE oracle matches made
	size_t oracleTestMatchesMade;

		// array of test index matches which were found
		size_t *oracleTestMatchIndexes;


	// number of UNIQUE postgres matches made
	size_t postgresTestMatchesMade;

		// array of test index matches which were found
		size_t *postgresTestMatchIndexes;


	// number of UNIQUE odbc matches made
	size_t odbcTestMatchesMade;

		// array of test index matches which were found
		size_t *odbcTestMatchIndexes;

	// number of BLIND sql injections found
	size_t blindSqliMatchesMade;




	// --- ANCHORS ------------------------

	// anchor test string
	char *anchorActualTest;

	// Html anchor entity pointers (only filled out if found in anchor)
	P_BP_HTML_ANCHOR_LIST anchor;

	// position in the variable list for the anchor in which
	// vulnVar occurs.
	size_t anchorVarPosition;


	// --- FORMS -------------------------------
	// Html form entity pointers (only filled out if found in form input)
	P_BP_HTML_FORM_LIST form;

	// input structure pointer which contains error generating potential
	P_BP_HTML_INPUT_LIST input;

	// Position in the input list which the vulnInput occurs.
	size_t inputPosition;

	// Input string used to create test
	char *actualInputTest;

		// List pointers
		struct _BP_WEB_SQLINJ_TEST_RESULT * first;
		struct _BP_WEB_SQLINJ_TEST_RESULT * prev;
		struct _BP_WEB_SQLINJ_TEST_RESULT * next;

} BP_WEB_SQLINJ_TEST_RESULT, *P_BP_WEB_SQLINJ_TEST_RESULT;



// SQL Test Count Retrieval: Gets the size of the array and divides it by the size of the
// test structure in order to return a number of tests.
size_t BP_GetSQLTestCount();

// Generates the array of sql tests to use in an assessment
P_BP_WEB_SQLINJ_TEST BP_SQLGenerateArray();

// Generates dummy array of sql tests.
P_BP_WEB_SQLINJ_TEST BP_SQLGenerateDummyArray();

// Generates random array of sql tests.
P_BP_WEB_SQLINJ_TEST BP_SQLGenerateRandomArray();


// SQL Dummy test count retrieval
size_t BP_GetSQLDummyTestCount();


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of SQL Tests
size_t BP_DestroySQLTests(BP_WEB_SQLINJ_TEST * tests, size_t test_count);

// Destroys an SQL Result List (ALWAYS DESTROYS FROM ->first)
size_t BP_DestroySQLResults(P_BP_WEB_SQLINJ_TEST_RESULT results);


#endif /* BPWEBEXPLOITATIONSQL_H_ */
