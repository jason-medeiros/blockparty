/*
 * BP-WebExploitationCommandExecution.h
 *
 *  Created on: Sep 3, 2014
 *      Author: root
 */

#ifndef BP_WEBEXPLOITATIONCOMMANDEXECUTION_H_
#define BP_WEBEXPLOITATIONCOMMANDEXECUTION_H_

typedef enum BP_WEB_COMMAND_INJECTION_VERIFICATION_T
{
	BP_WEB_COMMAND_INJECTION_VERIFICATION_NONE,
	BP_WEB_COMMAND_INJECTION_VERIFICATION_CHECK_FILE_WRITTEN,
	BP_WEB_COMMAND_INJECTION_VERIFICATION_CHECK_FINGERPRINT_MATCHED
};

typedef enum BP_WEB_COMMAND_INJECTION_FILE_CHECK_T
{
	BP_WEB_COMMAND_INJECTION_FILE_CHECK_NONE,
	BP_WEB_COMMAND_INJECTION_FILE_CHECK_RELATIVE_PATH,
	BP_WEB_COMMAND_INJECTION_FILE_CHECK_ABSOLUTE_PATH
};

typedef enum BP_WEB_COMMAND_INJECTION_FILE_CLEANUP_INDICATOR
{
	BP_WEB_COMMAND_INJECTION_FILE_CLEANUP_NONE,
	BP_WEB_COMMAND_INJECTION_FILE_CLEANUP_LEAVE_SHELL,
	BP_WEB_COMMAND_INJECTION_FILE_CLEANUP_DESTROY_SHELL
};

typedef enum BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_T
{
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_NONE,
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_PHP,
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_ASP,
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_JSP,
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_CFM,
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_DNET
};



// Verifies that a reflective injection exists by running
// computational pattern matching.  The pattern matching
// essentially requires the backend command processor to
// run a trivial computation, which is then potentially echo'ed
// to a page.  If that occurs, the echoed data is matched
// with precomputed values in order to make an accurate determination.
typedef struct __BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST {

	// the execution test
	char * execution_test;

	// the precomputed test session
	char * precomputed_test_result;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Front and Back Parts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// front part of string to invoke an executable scenario
	char *front_part;

	// back part of string to invoke an executable scenario
	char *back_part;

} BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST, *P_BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST;



// Verifies that file injection verifications exist.
typedef struct __BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_T {



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% File Verification Tests Flags %%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// value of the programming language
	BP_WEB_COMMAND_INJECTION_FILE_PROGRAMMING_LANGUAGE_T programming_language_for_file_upload;

	// the verification path type of the command injection vulnerabilitiy
	BP_WEB_COMMAND_INJECTION_FILE_CHECK_T verification_path_type;

	// file injection test cleanup indicator
	BP_WEB_COMMAND_INJECTION_FILE_CLEANUP_INDICATOR cleanup_indicator;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% File Information %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// the code to attempt to upload
	char * upload_file_body;

	// the filename to create
	char * upload_file_name;

	// the file upload path
	char * upload_file_path;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Front and Back Parts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// front part of string to invoke an executable scenario
	char *front_part;

	// back part of string to invoke an executable scenario
	char *back_part;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Remote File Path Checks %%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// the path to check to see if the up
	char * remote_file_paths;

	// the number of file paths to check
	size_t remote_file_path_n;

} BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_TEST, *P_BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_TEST;



// command injection elements store actual test sets
typedef struct __BP_WEB_COMMAND_INJECTION_ELEMENT {


	// The reason that tests each carry their own execution strings,
	// is that the outcome of each test is determined by a different
	// execution string.


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Pattern Reflection Tests %%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// pattern reflection tests
	P_BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST pattern_reflection_tests;

	// number of reflection tests to run
	size_t pattern_reflection_test_n;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% File Verification Tests %%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// File verification tests are used to determine if a command resulted
	// in a file being written.

	// file verification tests which must be run with this element
	P_BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_TEST file_verification_tests;

	// number of verification tests to run
	size_t file_verification_test_n;


} BP_WEB_COMMAND_INJECTION_ELEMENT, *P_BP_WEB_COMMAND_INJECTION_ELEMENT;



// Command line injection result.
typedef struct __BP_WEB_COMMAND_INJECTION_TEST {


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Request Data %%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// request data
	BP_WEB_ANALYSIS_BASIC_REQUEST_DATA request_data;

	// --- Anchor Information ------------

	// indicator to determine whether or not this test is an anchor test
	BP_BOOL is_anchor_test;

	// The anchor which is to be tested
	P_BP_HTML_ANCHOR_LIST anchor;

	// The anchor var which is to be tested.
	P_BP_HTML_ANCHOR_VAR_LIST anchor_var;



	// --- Form Information -------------

	// indicator to determine whether or not this test is a form test
	BP_BOOL is_form_test;

	// The form which is to be tested
	P_BP_HTML_FORM_LIST form;

	// input to test
	P_BP_HTML_INPUT_LIST form_input;


	// if this flag is set, this test will not be used during testing
	BP_BOOL disabled;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Test Related Data %%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



	// indicator to determine whether or not the test is completed
	BP_BOOL tests_completed;

	// if the test reported a vulnerable condition, report here
	BP_BOOL testing_reported_vulnerable_condition;


	// --- File Verification Tests Matched -------------

	// Number of file verification tests which were matched.
	size_t * file_verification_tests_found_vulnerable;

	// number of elements in the above index
	size_t   file_verification_tests_found_vulnerable_n;



	// --- Pattern Reflection Tests Matched ------------

	// Number of pattern reflection conditions which were matched.
	size_t * pattern_reflection_tests_found_vulnerable;

	// number of elements in the above index
	size_t   pattern_reflection_tests_found_vulnerable_n;






} BP_WEB_COMMAND_INJECTION_TEST, *P_BP_WEB_COMMAND_INJECTION_TEST;


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Generates Final Test Send Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// Interactive command shell
typedef struct __BP_WEB_COMMAND_INJECTION_INTERACTIVE_COMMAND_SHELL_INFO {

	// past commands to run
	char ** past_commands;

	// the current command index
	size_t current_command_idx;


} BP_WEB_COMMAND_INJECTION_INTERACTIVE_COMMAND_SHELL_INFO, *P_BP_WEB_COMMAND_INJECTION_INTERACTIVE_COMMAND_SHELL_INFO;


// http requests which will be sent
typedef struct __BP_WEB_COMMAND_INJECTION_HTTP_REQUEST {


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Request Configuration %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// always set
	char * get_str;

	// post string is set if we're posting data
	char * post_str;

	// cookie string is set if we have a cookie
	char * cookie_str;

	// header is set if we're sending a header test
	char * header_str;

	// this is set if our request succeeded
	BP_BOOL request_succeded;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Associated Element %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// test associated with this request configuration set
	P_BP_WEB_COMMAND_INJECTION_TEST test_ref;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Associated Element Tests %%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	// if we have file verification match, this is set
	BP_BOOL is_file_verification_vuln;

	// if we have a pattern reflection match, this is set
	BP_BOOL is_pattern_reflection_vuln;


	// file verification test associated with this request set
	P_BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_TEST file_verification_test_ref;

	// index of the file verification test
	size_t file_verification_test_index;


	// pattern reflection test associated with this request set
	P_BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST pattern_reflection_test_ref;

	// the index of the pattern reflection test
	size_t pattern_reflection_test_index;


} BP_WEB_COMMAND_INJECTION_HTTP_REQUEST, *P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST;

// This is generated automatically below
typedef struct __BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO {

	// the actual generated requests which will be sent
	P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST generated_requests;

	// the number of requests to send
	size_t request_n;

} BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO, *P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO;



// This structure holds information relative to command injection testing.  These belong
// the the web assessment structure, and are run as part of a web assessment.
typedef struct __BP_WEB_COMMAND_INJECTION_TEST_SESSION {



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% General Session Information %%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// tail queue allocator to associate with this result set
	P_BP_LINKL tq;

	// A reference to the assessment that this belongs to
	// DO NOT FREE
	P_BP_WEB_ASSESSMENT assessment_reference;

	// A reference to the html extraction this was created with
	// DO NOT FREE
	P_BP_HTML_FULL_EXTRACTION html_extraction_reference;

	// semaphore for locking (used when threads need to reference this assessment)
	sem_t lock;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Gadget Libraries %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// A log of all requests made during the session (stored
	// as an array of pointers to request structures, not a stack)
	P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST * all_requests;
	size_t                                    request_n;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Gadget Libraries %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Gadget library for PHP
	P_BP_PHP_GADGET_LIBRARY php_gadget_library;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Command Injection Test Set %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// pointer to the command line injectio ntests
	P_BP_WEB_COMMAND_INJECTION_TEST cmd_injection_test_set;

	// number of tests in the above array
	size_t cmd_injection_test_set_n;

	// number of code execution conditions discovered
	size_t total_command_injection_points_discovered;


	// will stop a test after code injection is discovered for that anchor/form test
	BP_BOOL stop_cmd_injection_test_after_code_execution_discovered;

	// --- Test Counters -----------

	// total number of anchor tests
	size_t total_anchor_tests_in_test_set;

	// total number of form tests
	size_t total_form_tests_in_test_set;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Test Elements %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Test elements confer to reflective/file verification test sets, and
	// are each run for each item provided.  This is a stack of test items,
	// with each test set usually being a copy of a similar test, just with
	// differing parameters.

	// command injection test elements (different types of tests)
	P_BP_WEB_COMMAND_INJECTION_ELEMENT test_elements;

	// number of test elments in the test element stack
	size_t test_element_n;



	// List pointers
	struct __BP_WEB_COMMAND_INJECTION_TEST_SESSION * first;
	struct __BP_WEB_COMMAND_INJECTION_TEST_SESSION * prev;
	struct __BP_WEB_COMMAND_INJECTION_TEST_SESSION * next;

} BP_WEB_COMMAND_INJECTION_TEST_SESSION, *P_BP_WEB_COMMAND_INJECTION_TEST_SESSION;


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Main Workhorse Thread %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





// These parameters are passed to command injection threads.  The threads
// run the tests in parallel, and use these structures to gain relevant data.
typedef struct __BP_WEB_COMMAND_INJECTION_THREAD_PARAMETERS {

	// the assessment from which this test belongs
	P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session;

	// the test which will be run
	P_BP_WEB_COMMAND_INJECTION_TEST test;

} BP_WEB_COMMAND_INJECTION_THREAD_PARAMETERS, *P_BP_WEB_COMMAND_INJECTION_THREAD_PARAMETERS;






// This is the main workhorse routine for validating command injection tests.  Remember
// that this routine takes a managed thread parameter, which is NOT opaque.  It must be
// locked and referenced for parameter extraction.
void * BP_CommandInjectionRunTest_thinit(void *managed_thread_parameter);

// Attempt to lock assessment semaphore.
BP_ERROR_T BP_CommandInjectionLockAssessment(P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session);

// Attempt to unlock assessment semaphore.
BP_ERROR_T BP_CommandInjectionUnlockAssessment(P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Generates Final Test Send Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




// generates command injection requests from element sets
P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO BP_CommandInjectionGenerateHTTPRequests
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		P_BP_WEB_COMMAND_INJECTION_TEST test,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT element
);

// runs command injection tests (actually makes requests)
BP_ERROR_T BP_CommandInjectionRunHTTPRequests
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		P_BP_HTTP_SESSION http_session,
		P_BP_WEB_COMMAND_INJECTION_TEST test,
		P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO http_generated_requests
);

// displays a set of http requests
BP_ERROR_T BP_CommandInjectionDisplayHTTPRequests
(
		P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO http_generated_requests
);


// Generates a custom
P_BP_WEB_COMMAND_INJECTION_HTTP_REQUEST_INFO BP_CommandInjectionGenerateCustomHTTPInjectionRequest
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		P_BP_WEB_COMMAND_INJECTION_TEST         test,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT      element,
		char * custom_command
);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Generate New Session Entry %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Generate a new command injection test session.
P_BP_WEB_COMMAND_INJECTION_TEST_SESSION BP_CommandInjectionGenerateNewSession();

// Generate a new command injection test session, complete with default values filled
// in, by providing a web assessment.
P_BP_WEB_COMMAND_INJECTION_TEST_SESSION BP_CommandInjectionGenerateNewSessionFromWebAssessmentAndHTMLExtraction
(
		P_BP_WEB_ASSESSMENT       assessment,
		P_BP_HTML_FULL_EXTRACTION html_extraction
);

// Destroy the command line injection session
BP_ERROR_T BP_CommandInjectionDestroySession(P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session);



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Add New Test Session %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// adds a command injection test to a provided session
BP_ERROR_T BP_CommandInjectionAddTestToSession
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION session,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT test
);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Test Generation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// adds a command injection test to a provided session
BP_ERROR_T BP_CommandInjectionAddTestToSession
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION session,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT         test
);


// --- Add Differing Test Types ---------

// Add file verification test to a test element.
BP_ERROR_T BP_CommandInjectionAddFileVerificationTestToInjectionElement
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION           session,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT                    cmd_injection_element,
		P_BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_TEST file_verification_test
);

// Add a command reflection test to a test element.
BP_ERROR_T BP_CommandInjectionAddPatternReflectionTestToInjectionElement
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION            session,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT                     element,
		P_BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST pattern_reflection_test
);


// --- Generate Default Tests ------------

#define DEFAULT_COMMAND_INJECTION_TEST_GENERATION_COUNT 3

// Generates a stack of randomly generated test elements, and adds them
// to the provided session.
BP_ERROR_T BP_CommandInjectionGenerateDefaultTestElementsForSession
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION session,
		size_t                                 element_creation_n
);


// Generate default file verifidcation test sets.
BP_ERROR_T BP_CommandInjectionGenerateDefaultFileVerificationTests
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION session,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT cmd_injection_element
);

// Generate default pattern reflection test sets.
BP_ERROR_T BP_CommandInjectionGenerateDefaultPatternReflectionTests
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION session,
		P_BP_WEB_COMMAND_INJECTION_ELEMENT cmd_injection_element
);


// --- Copy Tests To Individual Elements ----------------

// This will copy a test set (aka file upload, reflection) into a local element
// (aka an anchor or form test), and randomize individual test elements.  This
// needs to be run AFTER anchors and forms are parsed.
BP_ERROR_T BP_CommandInjectionCopyTestsToElementsGenUpdatedValues
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION session
);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Target Generators, Parses HTML Extraction For Targets %%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// This routine will parse a HTML extraction in order to generate new targets
// for the command injection subsystem.
BP_ERROR_T BP_CommandInjectionParseHtmlExtractionForNewTargets
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		P_BP_HTML_FULL_EXTRACTION html_extraction
);


// Attempt to parse html forms for new targets.
BP_ERROR_T BP_CommandInjectionParseHtmlFormsForNewTargets
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		P_BP_HTML_FORM_LIST                    forms
);

// Attempt to parse html anchors for new targets.
BP_ERROR_T BP_CommandInjectionParseHtmlAnchorsForNewTargets
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		P_BP_HTML_ANCHOR_LIST                  anchors
);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Test Visualizers %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Display the command injection session
BP_ERROR_T BP_CommandInjectionDisplaySession
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		BP_BOOL display_cmd_injection_test_set = BP_TRUE,
		BP_BOOL display_anchor_tests           = BP_TRUE,
		BP_BOOL display_form_tests             = BP_TRUE,
		BP_BOOL display_test_elements          = BP_TRUE
);


// Display test sets
BP_ERROR_T BP_CommandInjectionDisplayTestSets
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		BP_BOOL display_anchor_tests = BP_TRUE,
		BP_BOOL display_form_tests   = BP_TRUE
);

// Display a test set element
BP_ERROR_T BP_CommandInjectionDisplayTestSet(P_BP_WEB_COMMAND_INJECTION_TEST cmd_injection_test_set);

// Display injection session elements.
BP_ERROR_T BP_CommandInjectionDisplayTestElements
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session
);

// Display a single reflection test
BP_ERROR_T BP_CommandInjectionDisplayReflectionTest(P_BP_WEB_COMMAND_INJECTION_PATTERN_REFLECTION_TEST test);

// Display a single file verification test
BP_ERROR_T BP_CommandInjectionDisplayFileVerificationTest(P_BP_WEB_COMMAND_INJECTION_FILE_VERIFICATION_TEST test);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Test Dispatchers %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// This routine will attempt to run all command injection tests which are not
// marked as disabled.  Tests are run in parallel based on the provided thread
// count.
BP_ERROR_T BP_CommandInjectionRunTests
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		size_t thread_count
);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Execute Commands On Shells %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

typedef struct __P_BP_COMMAND_INJECTION_EXECUTION_RESULT {
	char * returned_data;
	size_t returned_len;
} BP_COMMAND_INJECTION_EXECUTION_RESULT, *P_BP_COMMAND_INJECTION_EXECUTION_RESULT;


// This will execute a command on a given shell, and try to return the relevant data.
P_BP_COMMAND_INJECTION_EXECUTION_RESULT BP_CommandInjectionExecuteCommandOnShell
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION cmd_injection_session,
		char *                                  execute_command,
		P_BP_WEB_COMMAND_INJECTION_TEST         vulnerable_element,
		BP_BOOL prefer_reflective               = BP_TRUE
);

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Interactive Controlling Command Injection Results %%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// Run an interactive command
BP_ERROR_T BP_CommandInjectionShellInteractiveRunCommand
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION    session,
		char *                                     command,
		char *                                     command_arg,
		size_t                                     command_arg_n
);

// Interactive shell session.
BP_ERROR_T BP_CommandInjectionShellInteractive
(
		P_BP_WEB_COMMAND_INJECTION_TEST_SESSION           session
);



#endif /* BP_WEBEXPLOITATIONCOMMANDEXECUTION_H_ */
