/*
 * BP-WebExploitationXss.h
 *
 *  Created on: Apr 3, 2009
 *      Author: root
 */

#ifndef BPWEBEXPLOITATIONXSS_H_
#define BPWEBEXPLOITATIONXSS_H_

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%% CROSS SITE SCRIPTING (XSS) %%%%%%%%%%%%%%%%%%%%%%%%%

// A xss vulnerability can either be found inside an existing tag
// or is by itself a tag set.  This type enum defines which we are
// examining.
enum BP_XSS_VERIFICATION_POLICY
{
	BP_XSS_NONE,
	BP_XSS_IN_TAG,
	BP_XSS_IS_TAG
};


// These attack levels are used to determine what tests can be
// run during tests.  Safe will not perform actual script injections,
// and only will inject fake script conditions.  Unsafe will use
// live script examples.
enum BP_XSS_ATTACK_LEVEL
{
	BP_XSS_ATTACK_NONE,
	BP_XSS_ATTACK_SAFE,
	BP_XSS_ATTACK_UNSAFE,
	BP_XSS_ATTACK_ALL
};


// Base structure that is used below for test strings
// Front string is used in combination with end string
// in order to build conditions. The actual array of tests
// is generated via the function BP_XSSGenerateArray defined
// below.
typedef struct _BP_WEB_XSS_TEST {

	// the front of the test condition
	char *testFront;

	// the end of the test condition
	char *testTail;

	// Exploit type
	BP_WEB_EXPLOIT_TEST_TYPE type;

	// Verification policy
	BP_XSS_VERIFICATION_POLICY policy;

	// Attack Level (legally safe or unsafe)
	BP_XSS_ATTACK_LEVEL attackLevel;

} BP_WEB_XSS_TEST, *P_BP_WEB_XSS_TEST;


// Used to determine how much of a match has been made
enum BP_WEB_XSS_MATCH_RESULT {
	BP_WEB_XSS_MATCH_NONE,
	BP_WEB_XSS_MATCH_FULL,
	BP_WEB_XSS_MATCH_PARTIAL
};

// is the target an anchor or form
enum BP_XSS_TARGET_TYPE {
	BP_XSS_TARGET_TYPE_NONE,
	BP_XSS_TARGET_TYPE_ANCHOR,
	BP_XSS_TARGET_TYPE_FORM,
	BP_XSS_TARGET_TYPE_COOKIE
};


// The XSS check set identifier to use, can either be standard,
// dummy, or user defined.
enum BP_XSS_TEST_SET {
	BP_XSS_TEST_SET_NONE,
	BP_XSS_TEST_SET_STANDARD,
	BP_XSS_TEST_SET_DUMMY,
	BP_XSS_TEST_SET_USER_DEFINED,
	BP_XSS_TEST_SET_INVALID
};


// Test results structure for XSS
typedef struct _BP_WEB_XSS_TEST_RESULT {

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Request Data Structure %%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// request data
	BP_WEB_ANALYSIS_BASIC_REQUEST_DATA request_data;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% General Result Information %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// offset into the xssTest array below to determine
	// which XSS test result is corresponding to this structure.
	size_t testIndex;

	// target type (anchor, form, or cookie)
	BP_XSS_TARGET_TYPE targetType;

	// Normal match
	bool match;

	// Magic Quotes Match Flag
	bool magicQuotesMatch;


	// --- ANCHORS ------------------------

	// anchor test string
	char *anchorActualTest;

	// Html anchor entity pointers (only filled out if found in anchor)
	P_BP_HTML_ANCHOR_LIST     anchor;
	P_BP_HTML_ANCHOR_VAR_LIST vulnVar;

	// position in the variable list for the anchor in which
	// vulnVar occurs.
	size_t anchorVarPosition;


	// --- FORMS -------------------------------

	// form variable test string (only contains variables)
	char *formActualTest;

	// Html form entity pointers (only filled out if found in form input)
	P_BP_HTML_FORM_LIST  form;
	P_BP_HTML_INPUT_LIST vulnInput;

	// Position in the input list which the vulnInput occurs.
	size_t inputVarPosition;

		// List pointers
		struct _BP_WEB_XSS_TEST_RESULT * first;
		struct _BP_WEB_XSS_TEST_RESULT * prev;
		struct _BP_WEB_XSS_TEST_RESULT * next;

} BP_WEB_XSS_TEST_RESULT, *P_BP_WEB_XSS_TEST_RESULT;



// XSS Injection

// Generates the test array
P_BP_WEB_XSS_TEST BP_XSSGenerateArray();

// Generate dummy XSS Test Array
P_BP_WEB_XSS_TEST BP_XSSGenerateDummyArray();

// Generate random XSS test array
P_BP_WEB_XSS_TEST BP_XSSGenerateRandomArray();


// Runs an XSS Test against an anchor
P_BP_WEB_XSS_TEST_RESULT BP_XSSRunTestsAgainstAnchor(P_BP_WEB_XSS_TEST tests, P_BP_HTML_ANCHOR_LIST anchor, P_BP_HTTP_SESSION session, BP_XSS_ATTACK_LEVEL attackLevel, size_t secondsBetweenTest, size_t maxTests);

// Runs XSS Tests against a form
P_BP_WEB_XSS_TEST_RESULT BP_XSSRunTestsAgainstForm(P_BP_WEB_XSS_TEST tests, P_BP_HTML_FORM_LIST anchor, P_BP_HTTP_SESSION session, BP_XSS_ATTACK_LEVEL attackLevel, size_t secondsBetweenTest, size_t maxTests);


// XSS Test Count Retrieval: Gets the size of the array and divides it by the size of the
// test structure in order to return a number of tests.
size_t BP_GetXSSTestCount();

// DUMMY ARRAY XSS Test Count Retrieval: Gets the size of the array and divides it by the size of the
// test structure in order to return a number of tests.
size_t BP_GetXSSDummyTestCount();

// Gets the anchor variable lengths (total length of all variable names)
size_t BP_GetAnchorVarMaxLengths(P_BP_HTML_ANCHOR_VAR_LIST anchorVars);

// Gets the form variable lengths (total length of all variable names)
size_t BP_GetFormVarNameLengths(P_BP_HTML_FORM_LIST anchors);


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of XSS Tests
size_t BP_DestroyXSSTests(BP_WEB_XSS_TEST * tests, size_t test_count);

// Destroys an XSS Result List
size_t BP_DestroyXSSResults(P_BP_WEB_XSS_TEST_RESULT results);

#endif /* BPWEBEXPLOITATIONXSS_H_ */
