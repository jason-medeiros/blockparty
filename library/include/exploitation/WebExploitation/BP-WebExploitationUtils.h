/*
 * BP-WebExploitationUtils.h
 *
 *  Created on: Apr 4, 2009
 *      Author: root
 */

#ifndef BPWEBEXPLOITATIONUTILS_H_
#define BPWEBEXPLOITATIONUTILS_H_



// Database enumerators for all data types
typedef enum BP_WEB_ANALYSIS_ENGINE_T
{
	BP_WEB_ANALYSIS_ENGINE_NONE,
	BP_WEB_ANALYSIS_ENGINES_MYSQL,
	BP_WEB_ANALYSIS_ENGINES_MSQL,
	BP_WEB_ANALYSIS_ENGINES_ORACLE,
	BP_WEB_ANALYSIS_ENGINES_ODBC,
	BP_WEB_ANALYSIS_ENGINES_POSTGRES,
	BP_WEB_ANALYSIS_ENGINES_PHP,
	BP_WEB_ANALYSIS_ENGINES_JSP,
	BP_WEB_ANALYSIS_ENGINES_ASP,
	BP_WEB_ANALYSIS_ENGINES_CFM,
	BP_WEB_ANALYSIS_ENGINES_DNET
};

typedef enum BP_WEB_ANALYSIS_CONDITION_T
{
	BP_WEB_ANALYSIS_CONDITION_NONE,
	BP_WEB_ANALYSIS_CONDITION_SQL_MSG,
	BP_WEB_ANALYSIS_CONDITION_APP_ENGINE_MSG,
	BP_WEB_ANALYSIS_CONDITION_XSS

};

// Basic request data, stored in each of the analysis link elements.  Typically
// doesn't need to be free'd due to static elements.
typedef struct __BP_WEB_ANALYSIS_BASIC_REQUEST_DATA {
	size_t                      result_id;
	size_t                      request_id;
	size_t                      http_connect_code;
	size_t                      http_status_code;
	char                        http_get[1024];
	char                        http_post[1024];
	char                        http_cookie[1024];
	char                        http_header[1024];
	char                        suspected_get_var[1024];
	char                        suspected_post_var[1024];
	char                        suspected_cookie_var[1024];
	char                        suspected_header_var[1024];
	BP_WEB_ANALYSIS_ENGINE_T    detection_engine;
	BP_WEB_ANALYSIS_CONDITION_T condition;
	char                        detection_string_test[1024];
	char                        detection_string_found[1024];
	size_t                      detection_table_index;
} BP_WEB_ANALYSIS_BASIC_REQUEST_DATA, *P_BP_WEB_ANALYSIS_BASIC_REQUEST_DATA;


// display the basic web analysis request data
BP_ERROR_T BP_DisplayWebAnalysisBasicRequestData(P_BP_WEB_ANALYSIS_BASIC_REQUEST_DATA request_data);

// Generates a magic-quotes string based on an instring (malloced and must be freed)
char * BP_WebAssessmentGenerateMagicQuoteStrFromStr(char *inStr);


// Returns a newly allocated string with ' ' instead of %20s (used for matching)
char * BP_GenNonUnicodeSpaceString(char *inStr, size_t len);

// converse of above, returns a newly allocated string with %20s instead of ' ' (used for making requests)
// NOTE: Curl requests dont do well with ' ' in them, in fact, it terminates them.. request must use %20
char * BP_GenUnicodeSpaceString(char *inStr, size_t len);


// Returns the length from the start of haystack, till the beginning of needle
size_t BP_GetLengthTillMatch(char *haystack, char *needle, size_t needleLen);

// Prints a line till \n is encountered, must be null terminated
void BP_PrintLine(char *buff);


// Subtracts heap pointers when used with MemMem (do not use except on local buffers
// or results can be inaccurate)
size_t BP_SubtractHeapSearches(void *larger, void * smaller);



// Attempts to find the path (without script or parameters) of a given url
// primarily for the purpose of building targets. Returned string is a heap
// duplicate (strdup) which must be freed. The base_specifier parameter should
// be set to one of the following values:

// 0 = absolute base (eg: www.google.com/ from url www.google.com/test/whatever
// 1 = last path     (eg: www.google.com/test/ from url www.google.com/test/whatever

char * BP_ParseURLToPath(char * url, size_t base_specifier);

// Converse to parseurltopath.  Simply parses a url and returns a duplicated
// string that contains the script portion of a url.
//
// Example: path_flag = 0
//    www.google.com/whatever/somethng/blah.txt?1=2&3=4
//    - is returned as-
//    blah.txt?1=2&3=4
//
// Example: path_flah = 1
//    www.google.com/whatever/something/blah.txt?1=2&3=4
//    - is returned as -
//    whatever/something/blah.txt?1=2&3=4
char * BP_ParseURLToScript(char * url, size_t path_flag, size_t remove_params);


// Version of BP_BarseURLToScript that operates on
// relative links.  See examples below.
//
// Example: path_flag = 0
//    whatever/somethng/blah.txt?1=2&3=4
//    - is returned as-
//    blah.txt?1=2&3=4
//
// Example: path_flah = 1
//    www.google.com/whatever/something/blah.txt?1=2&3=4
//    - is returned as -
//    whatever/something/blah.txt?1=2&3=4
char * BP_ParseRelativeLinkToScript(char *relative_url, size_t remove_params);

// Converts a relative link, to a base embedded link. Look at
// the following as an example:
//   base_test_uri = http://localhost/test/
//   relative_uri  = ./blah.php?blah=blah
//   this produces: http://localhost/test/blah.php?blah=blah
char * BP_CreateDirectUrlFromRel(char *base_url, char *direct_url);

#endif /* BPWEBEXPLOITATIONUTILS_H_ */
