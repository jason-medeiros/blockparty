/*
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 * %%% Unit Test no. 1 for Modular Exploitation Subsystem %%%%%%%%%%%%%%%%%
 * %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 *
 * This unit test is in its simplest essence a test module fully ready to be
 * used as either a template for your own module development, or as a stress test
 * for testing the engine itself.
 *
 */


// Main Blockparty Include
#include "../../../../../include/BP-Main.h"

// create the exploit module within this routine.  By create, I mean generate the structure
// and fill out the non-auto pointers.
P_BP_EXPLOIT_MODULE BP_ExploitModule_ut()
{

	// allocate space for the new module
	P_BP_EXPLOIT_MODULE mme_module = (P_BP_EXPLOIT_MODULE) bpcalloc(sizeof(BP_EXPLOIT_MODULE), 1);

	// ensure we've created enough space for the module
	if(!mme_module)
		return NULL;

	// set module name
	mme_module->name = (char *) bpstrdup("Unit Testing Exploit Module for Testing Blockparty Functionality");

	// set major and minor versions
	mme_module->major_version = 1;
	mme_module->minor_version = 1;

	// set unit test functions
	mme_module->exploit_init_fn          = BP_ExploitModule_ut_init;
	mme_module->exploit_load_fn          = BP_ExploitModule_ut_load;
	mme_module->exploit_unload_fn        = BP_ExploitModule_ut_unload;
	mme_module->exploit_retarget_fn      = BP_ExploitModule_ut_retarget;
	mme_module->exploit_assess_target_fn = BP_ExploitModule_ut_assess_target;
	mme_module->exploit_fire_fn          = BP_ExploitModule_ut_fire;
	mme_module->exploit_db_report_fn     = BP_ExploitModule_ut_db_report;

	// return the module
	return mme_module;

}




// dummy init function (allows user to supply custom arguments that the
// exploit module may need)
BP_ERROR_T BP_ExploitModule_ut_init(void *module, void *mod_user_arguments)
{

	// ensure we have a module pointer
	if(!module)
		return ERR_FAILURE;

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Initialized OK!");

	// set exploit module for local reference
	P_BP_EXPLOIT_MODULE exploit_module = (P_BP_EXPLOIT_MODULE) module;

	// set exploit module status to initialized
	exploit_module->mod_status = BP_EXPLOIT_MODULE_STATUS_UNINITIALIZED;

	// set the run status to idle
	exploit_module->mod_run_status = BP_EXPLOIT_MODULE_RUN_STATUS_IDLE;

	// return indicating success
	return ERR_SUCCESS;

}

// dummy load function
BP_ERROR_T BP_ExploitModule_ut_load(void *module)
{

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Loaded OK!");

	// return indicating success
	return ERR_SUCCESS;

}

// dummy unload function
BP_ERROR_T BP_ExploitModule_ut_unload(void *module)
{

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Unloaded OK!");



	// return indicating success
	return ERR_SUCCESS;

}

// dummy retarget function
BP_ERROR_T BP_ExploitModule_ut_retarget(void *module)
{

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Retarget OK!");

	// return indicating success
	return ERR_SUCCESS;

}


// dummy assessment function
BP_ERROR_T BP_ExploitModule_ut_assess_target(void *module)
{

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Assess Target OK!");

	// return indicating success
	return ERR_SUCCESS;

}



// dummy assessment function
BP_ERROR_T BP_ExploitModule_ut_fire(void *module)
{

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Assess Target OK!");

	// return indicating success
	return ERR_SUCCESS;

}


// dummy assessment function
BP_ERROR_T BP_ExploitModule_ut_db_report(void *module)
{

	// display module load message
	printf("\n\n [+] Exploit Module Unit Test Database Reporting OK!");

	// return indicating success
	return ERR_SUCCESS;

}
