#include "../../../../../include/BP-Main.h"


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Predefined Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/* SEE SOURCE CC FILE FOR INDIVIDUAL GADGET DEFINITIONS */
BP_ERROR_T BP_PHPGeneratePredefinedGadgets(P_BP_PHP_GADGET_LIBRARY open_gadget_lib)
{


	// check for a valid pointer
	if(!open_gadget_lib)
		return ERR_FAILURE;

	// check to make sure we have a valid tail queue allocator
	if(!open_gadget_lib->tq)
		return ERR_FAILURE;

	// allocate space for the gadgets (space determined by BP_PHP_PREDEFINED_GADGET_COUNT define)
	open_gadget_lib->gadgets = (P_BP_PHP_GADGET) tq_calloc
	(
			open_gadget_lib->tq,
			sizeof(BP_PHP_GADGET) * BP_PHP_PREDEFINED_GADGET_COUNT,
			1,
			BPLN
	);

	// iterative gadget index used for moving forward with gadget definitions
	size_t gidx = 0;

	// set local reference to tq allocator for local use
	P_BP_LINKL tq = open_gadget_lib->tq;

	// ref to current gadget (reused incrementally using macros below)
	P_BP_PHP_GADGET cg = &open_gadget_lib->gadgets[0];


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Local Expansion Macros %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// Below are some expansion macros which correlate to this routine.  They
	// are defined simply to assist with building the static gadgets found within
	// the library by compressing otherwise long code into simple easy to use
	// macro code.

	// string duplicator macro for duplicating strings with the
	// gadget library tail allocator (as referenced through tq)
	#ifndef _tqsd
	#define _tqsd(X) tq_strdup(tq, X, BPLN)
	#endif

	#ifndef _G_ADD_PLATFORM
	#define _G_ADD_PLATFORM(X) BP_ArrayPushSizeT((size_t) X, (size_t ** )&cg->hw_platforms, &cg->hw_platforms_n, tq)
	#endif

	#ifndef _G_ADD_LANG
	#define _G_ADD_LANG(X) BP_ArrayPushSizeT((size_t) X, (size_t ** )&cg->langs, &cg->langs_n, tq)
	#endif

	#ifndef _G_ADD_TARGET
	#define _G_ADD_TARGET(X) BP_ArrayPushSizeT((size_t) X, (size_t ** )&cg->os_targets, &cg->os_targets_n, tq)
	#endif

	#ifndef _G_SET_UUID
	#define _G_SET_UUID(X) cg->uuid = tq_strdup(tq, X, BPLN)
	#endif

	#ifndef _G_SET_NAME
	#define _G_SET_NAME(X) cg->name = tq_strdup(tq, X, BPLN)
	#endif

	#ifndef _G_SET_DESCRIPTION
	#define _G_SET_DESCRIPTION(X) cg->description = tq_strdup(tq, X, BPLN)
	#endif

	#ifndef _G_SET_GADGET_FMT
	#define _G_SET_GADGET_FMT(X) cg->gadget_fmt = tq_strdup(tq, X, BPLN)
	#endif

	#ifndef _G_SET_CATEGORY
	#define _G_SET_CATEGORY(X) cg->category = X
	#endif

	#ifndef _G_SET_TYPE
	#define _G_SET_TYPE(X) cg->type = X;
	#endif

	#ifndef _G_ADD_RANDOMIZE_SYM
	#define _G_ADD_RANDOMIZE_SYM(X) BP_ArrayPushDupStringTQ(tq, (char *) X, &cg->var_randomization_matrix, &cg->var_randomization_matrix_n)
	#endif

	#ifndef _G_ADD_OUTPUT_MAP_SYM
	#define _G_ADD_OUTPUT_MAP_SYM(X) BP_ArrayPushDupStringTQ(tq, (char *) X, &cg->output_map, &cg->output_map_n)
	#endif

	#ifndef _G_ADD_ARGUMENT
	#define _G_ADD_ARGUMENT(X,Y) BP_PHPGadgetAddRuntimeArgument(cg,X,Y)
	#endif

	#ifndef _G_MOVE_NEXT
	#define _G_MOVE_NEXT gidx++;cg=&open_gadget_lib->gadgets[gidx]; open_gadget_lib->gadget_n++
	#endif


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Loader Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// In this section you will find the definitions of individual gadgets
	// which are related to loader gadget generation.

	/* ================================================================
	 * Loader Gadget 1: XML Output Routine #1
	 *
	 * This code generates xml output directly via php.  It's typically
	 * used for the purpose of generating output data when mapping.  It's
	 * considered a loader gadget because it usually is preloaded before
	 * any mapping gadgets.
	 * ================================================================
	 */

	// set uuid of gadget (static, never changes, ever)
	_G_SET_UUID("cef10494-01c9-ccf6-1bbe-0b996f07f385");

	// name the gadget
	_G_SET_NAME("PHP XML Encoder 1");

	// provide a description for the gadget
	_G_SET_DESCRIPTION("Takes an array of maximum 2 depth, and encodes it as xml.  Each element is base64 encoded.");

	// set category and type within the current gadget
	_G_SET_CATEGORY(BP_GADGET_CATEGORY_LOADER);
	_G_SET_TYPE    (BP_GADGET_TYPE_OUTPUT_MAPPER);

	// add language to gadget definitions
	_G_ADD_LANG(BP_GADGET_SOFTWARE_LANGUAGE_PHP4);
	_G_ADD_LANG(BP_GADGET_SOFTWARE_LANGUAGE_PHP5);

	// set platforms
	_G_ADD_PLATFORM(BP_GADGET_HW_PLATFORM_ANY);

	// set targets
	_G_ADD_TARGET(BP_GADGET_OS_TARGET_ANY);

	// set the gadget format here (this is where the actual code for the gadget lives)
	_G_SET_GADGET_FMT
	(
			"$xmlout='<?xml version=\"1.0\" encoding=\"UTF-8\"?>'.\"\\n\";"\
			"$xmlout.='<root>'.\"\\n\";"\
			"foreach($___omap as $i => $v)"\
			"{"\
				"if(is_array($v))"\
				"{"\
					"$xmlout.=\"\\t<$i>\\n\";"\
					"foreach($v as $ii => $iv)"\
					"{"\
						"$xmlout.=\"\\t\\t<$ii>\".base64_encode($iv).\"</$ii>\\n\";"\
					"}"\
					"$xmlout .= \"\\t</$i>\\n\";"\
				"}"\
					"else "\
						"$xmlout.=\"\\t<$i>\".base64_encode($v).\"</$i>\n\";"\
			"}"\
			"$xmlout.='</root>';"
	);

	// symbol randomization matrix
	_G_ADD_RANDOMIZE_SYM("xmlout");

	// omap symbol comes predefined
	_G_ADD_OUTPUT_MAP_SYM("funcs");
	_G_ADD_OUTPUT_MAP_SYM("vars");
	_G_ADD_OUTPUT_MAP_SYM("consts");
	_G_ADD_OUTPUT_MAP_SYM("classes");

	// move to the next gadget
	_G_MOVE_NEXT;



	/*
	 * ================================================================
	 * Loader Gadget 2: XOR Loader Routine 1
	 * This routine uses normal xor to encode or decode a buffer.
	 * ================================================================
	 */

	// set uuid of gadget (static, never changes, ever)
	_G_SET_UUID("7108b46d-e634-659f-43b3-05737c9f63d3");

	// name the gadget
	_G_SET_NAME("PHP XOR Encoder 1");

	// provide a description for the gadget
	_G_SET_DESCRIPTION("XOR encodes a buffer.  This is traditional XOR encoding.");

	// set category and type within the current gadget
	_G_SET_CATEGORY(BP_GADGET_CATEGORY_LOADER);
	_G_SET_TYPE    (BP_GADGET_TYPE_OUTPUT_MAPPER);

	// add language to gadget definitions
	_G_ADD_LANG(BP_GADGET_SOFTWARE_LANGUAGE_PHP4);
	_G_ADD_LANG(BP_GADGET_SOFTWARE_LANGUAGE_PHP5);

	// set platforms
	_G_ADD_PLATFORM(BP_GADGET_HW_PLATFORM_ANY);
	_G_ADD_PLATFORM(BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_32);
	_G_ADD_PLATFORM(BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_32);

	// set targets
	_G_ADD_TARGET(BP_GADGET_OS_TARGET_ANY);
	_G_ADD_TARGET(BP_GADGET_OS_TARGET_DEBIAN_1_1);
	_G_ADD_TARGET(BP_GADGET_OS_TARGET_UBUNTU_9);

	// set the gadget format here (this is where the actual code for the gadget lives)
	_G_SET_GADGET_FMT
	(
        "$key = $___write_key;"\
        "$t = $___gadget_argv_1;"\
        "$ot = \"\";"\
		"for($i=0;$i<strlen($t);)"\
		"{"\
			"for($j=0;($j<strlen($k) && $i<strlen($t));$j++,$i++)"\
			"{"\
				"$ot .= $t{$i} ^ $k{$j};"\
			"}"\
		"}"
	);

	// symbol randomization matrix
	_G_ADD_RANDOMIZE_SYM("xmlout");

	// omap symbol comes predefined
	_G_ADD_OUTPUT_MAP_SYM("funcs");
	_G_ADD_OUTPUT_MAP_SYM("vars");
	_G_ADD_OUTPUT_MAP_SYM("consts");
	_G_ADD_OUTPUT_MAP_SYM("classes");

	// move to the next gadget
	_G_MOVE_NEXT;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Mapping Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Writer Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Backdoor Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Unit Test Gadgets %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	/*
	 * ================================================================
	 * Unit Test Gadget 1: Simple substitutions.
	 * ================================================================
	 */

	 // set uuid of gadget (static, never changes, ever)
	 _G_SET_UUID("a312629f-3e3f-b9aa-87ea-b7b734b1072f");

	 // name the gadget
	 _G_SET_NAME("PHP Unit Test 1");

	 // provide a description for the gadget
	 _G_SET_DESCRIPTION("Unit test for binary string replacement");

	// set category and type within the current gadget
	_G_SET_CATEGORY(BP_GADGET_CATEGORY_LOADER);
	_G_SET_TYPE    (BP_GADGET_TYPE_OUTPUT_MAPPER);

	// add language to gadget definitions
	_G_ADD_LANG(BP_GADGET_SOFTWARE_LANGUAGE_PHP4);
	_G_ADD_LANG(BP_GADGET_SOFTWARE_LANGUAGE_PHP5);

	// set platforms
	_G_ADD_PLATFORM(BP_GADGET_HW_PLATFORM_ANY);

	// set targets
	_G_ADD_TARGET(BP_GADGET_OS_TARGET_ANY);

	// set the gadget format here (this is where the actual code for the gadget lives)
	_G_SET_GADGET_FMT
	(
		"$uchar_string = $unit_test_uchar_string;"\
		"$norm_string  = $unit_test_norm_string;"\
		"$uint32_string= $unit_test_uint32_string;"\
		"print(\"<br>[+] \".$unit_test_title);"\
		"printf(\"<br>bin_data: %s\", $unit_test_norm_string);"
	);

	// symbol randomization matrix
	_G_ADD_RANDOMIZE_SYM("xmlout");

	// omap symbol comes predefined
	_G_ADD_OUTPUT_MAP_SYM("funcs");
	_G_ADD_OUTPUT_MAP_SYM("vars");
	_G_ADD_OUTPUT_MAP_SYM("consts");
	_G_ADD_OUTPUT_MAP_SYM("classes");

	// add a variety of arguments to sub
	_G_ADD_ARGUMENT(BP_GADGET_ARG_TYPE_CHAR_STRING,  "$unit_test_title");
	_G_ADD_ARGUMENT(BP_GADGET_ARG_TYPE_UCHAR_STRING, "$unit_test_uchar_string");
	_G_ADD_ARGUMENT(BP_GADGET_ARG_TYPE_CHAR_STRING,  "$unit_test_norm_string");
	_G_ADD_ARGUMENT(BP_GADGET_ARG_TYPE_UINT32,       "$unit_test_uint32_string");


	// move to the next gadget
	_G_MOVE_NEXT;



	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Application Exit Point %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



	// undefine local expansion macros
	#ifdef _tqsd
	#undef _tqsd
	#endif

	#ifdef _G_ADD_PLATFORM
	#undef _G_ADD_PLATFORM
	#endif

	#ifdef _G_ADD_LANG
	#undef _G_ADD_LANG
	#endif

	#ifdef _G_ADD_TARGET
	#undef _G_ADD_TARGET
	#endif

	#ifdef _G_SET_UUID
	#undef _ G_SET_UUID
	#endif

	#ifdef _G_SET_NAME
	#undef _G_SET_NAME
	#endif

	#ifdef _G_SET_DESCRIPTION
	#undef _G_SET_DESCRIPTION
	#endif

	#ifdef _G_SET_GADGET_FMT
	#undef _G_SET_GADGET_FMT
	#endif

	#ifdef _G_SET_CATEGORY
	#undef _G_SET_CATEGORY
	#endif

	#ifdef _G_SET_TYPE
	#undef _G_SET_TYPE
	#endif

	#ifdef _G_MOVE_NEXT
	#undef _G_MOVE_NEXT
	#endif

	#ifdef _G_ADD_RANDOMIZE_SYM
	#undef _G_ADD_RANDOMIZE_SYM
	#endif

	#ifdef _G_ADD_OUTPUT_MAP_SYM
	#undef _G_ADD_OUTPUT_MAP_SYM
	#endif


	// ===== Exit Predefined Gadgets Generator ===================


	// return indicating success
	return ERR_SUCCESS;

}

