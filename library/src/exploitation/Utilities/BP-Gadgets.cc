#include "../../../include/BP-Main.h"

// Builds a gadget library based on a stack of item parameters provided.  If
// a provided parameter is a null pointer, this adds ALL items to the library.
P_BP_GADGET_LIBRARY BP_BuildGadgetLibrary
(
		BP_GADGET_TYPE              * types,
		BP_GADGET_SOFTWARE_LANGUAGE * languages,
		BP_GADGET_HW_PLATFORM       * hw_platform

)
{




	// return indicating success
	return NULL;

}


// Destroys a gadget library
BP_ERROR_T BP_DestroyGadgetLibrary(P_BP_GADGET_LIBRARY lib)
{

	// return indicating success
	return ERR_SUCCESS;

}


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Gadget Display Routines %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Displays a gadget.
BP_ERROR_T BP_DisplayGadget(P_BP_GADGET gadget)
{

	// ensure we have a gadget
	if(!gadget)
		return ERR_FAILURE;

	// return indicating success
	return ERR_SUCCESS;

}


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Enum 2 String Functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// The following functions are used to translate enumerator values
// to string values.  This facility is used mainly for the purpose
// of visualizing current values occupied within existing gadgets.

// BP_GADGET_OS_TARGET to heap alloc string.
char * BP_GetOSTarget(BP_GADGET_OS_TARGET os_target, P_BP_LINKL tq)
{

	switch(os_target)
	{

		case BP_GADGET_OS_TARGET_UNSET:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UNSET", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UNSET");
			break;
		case BP_GADGET_OS_TARGET_ANY:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_ANY", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_ANY");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_6:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_6", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_6");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_7:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_7", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_7");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_8:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_8", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_8");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_9:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_9", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_9");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_10:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_10", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_10");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_11:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_11", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_11");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_12:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_12", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_12");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_13:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_13", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_13");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_14:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_14", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_14");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_15:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_15", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_15");
			break;
		case BP_GADGET_OS_TARGET_UBUNTU_16:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_UBUNTU_16", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_UBUNTU_16");
			break;
		case BP_GADGET_OS_TARGET_RHEL_2_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_2_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_2_1");
			break;
		case BP_GADGET_OS_TARGET_RHEL_3:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_3", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_3");
			break;
		case BP_GADGET_OS_TARGET_RHEL_4:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_4", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_4");
			break;
		case BP_GADGET_OS_TARGET_RHEL_5:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_5", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_5");
			break;
		case BP_GADGET_OS_TARGET_RHEL_6:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_6", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_6");
			break;
		case BP_GADGET_OS_TARGET_RHEL_7:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_7", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_7");
			break;
		case BP_GADGET_OS_TARGET_RHEL_8:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_8", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_8");
			break;
		case BP_GADGET_OS_TARGET_RHEL_9:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_RHEL_9", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_RHEL_9");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_1");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_2:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_2", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_2");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_3:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_3", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_3");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_4:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_4", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_4");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_5:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_5", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_5");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_6:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_6", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_6");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_7:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_7", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_7");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_8:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_8", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_8");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_9:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_9", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_9");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_10:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_10", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_10");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_11:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_11", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_11");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_12:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_12", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_12");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_13:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_13", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_13");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_14:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_14", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_14");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_15:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_15", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_15");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_16:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_16", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_16");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_17:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_17", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_17");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_18:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_18", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_18");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_19:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_19", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_19");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_20:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_20", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_20");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_21:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_21", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_21");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_22:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_22", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_22");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_23:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_23", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_23");
			break;
		case BP_GADGET_OS_TARGET_FEDORA_24:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_FEDORA_24", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_FEDORA_24");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_1_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_1_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_1_1");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_1_2:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_1_2", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_1_2");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_1_3:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_1_3", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_1_3");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_2:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_2", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_2");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_2_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_2_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_2_1");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_2_2:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_2_2", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_2_2");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_3:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_3", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_3");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_3_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_3_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_3_1");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_4:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_4", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_4");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_5:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_5", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_5");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_6:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_6", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_6");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_7:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_7", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_7");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_8:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_8", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_8");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_9:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_9", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_9");
			break;
		case BP_GADGET_OS_TARGET_DEBIAN_10:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_DEBIAN_10", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_DEBIAN_10");
			break;
		case BP_GADGET_OS_TARGET_WIN_7:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_7", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_7");
			break;
		case BP_GADGET_OS_TARGET_WIN_8:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_8", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_8");
			break;
		case BP_GADGET_OS_TARGET_WIN_8_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_8_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_8_1");
			break;
		case BP_GADGET_OS_TARGET_WIN_9:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_9", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_9");
			break;
		case BP_GADGET_OS_TARGET_WIN_VISTA:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_VISTA", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_VISTA");
			break;
		case BP_GADGET_OS_TARGET_WIN_XP:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_XP", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_XP");
			break;
		case BP_GADGET_OS_TARGET_WIN_ME:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_ME", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_ME");
			break;
		case BP_GADGET_OS_TARGET_WIN_98:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_98", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_98");
			break;
		case BP_GADGET_OS_TARGET_WIN_NT4:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_NT4", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_NT4");
			break;
		case BP_GADGET_OS_TARGET_WIN_95:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_95", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_95");
			break;
		case BP_GADGET_OS_TARGET_WIN_3_1:
			return tq ? tq_strdup(tq, "BP_GADGET_OS_TARGET_WIN_3_1", BPLN) :  bpstrdup("BP_GADGET_OS_TARGET_WIN_3_1");
			break;
		default:
			return NULL;
	}
	return NULL;
}

// BP_GADGET_HW_PLATFORM to heap alloc string.
char * BP_GetHWPlatform(BP_GADGET_HW_PLATFORM hw_platform, P_BP_LINKL tq)
{
	switch(hw_platform)
	{
		case BP_GADGET_HW_PLATFORM_UNSET:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_UNSET", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_UNSET");
			break;
		case BP_GADGET_HW_PLATFORM_ANY:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_ANY", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_ANY");
			break;
		case BP_GADGET_HW_PLATFORM_ANDROID_ARM_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_ANDROID_ARM_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_ANDROID_ARM_64");
			break;
		case BP_GADGET_HW_PLATFORM_ANDROID_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_ANDROID_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_ANDROID_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_ANDROID_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_ANDROID_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_ANDROID_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_OSX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_OSX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_OSX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_OSX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_OSX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_OSX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_iOS_ARM_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_iOS_ARM_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_iOS_ARM_32");
			break;
		case BP_GADGET_HW_PLATFORM_iOS_ARM_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_iOS_ARM_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_iOS_ARM_64");
			break;
		case BP_GADGET_HW_PLATFORM_WIN_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_WIN_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_WIN_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_WIN_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_WIN_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_WIN_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_GENERIC_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_DEBIAN_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_UBUNTU_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_KNOPPIX_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_GENTOO_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_PACMAN_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_FEDORA_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_324");
			break;
		case BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_RHEL_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_MANDRIVA_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_SUSE_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_SLACKWARE_LINUX_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_OPEN_BSD_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_OPEN_BSD_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_OPEN_BSD_X86_32");
			break;
		case BP_GADGET_HW_PLAtFORM_OPEN_BSD_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLAtFORM_OPEN_BSD_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLAtFORM_OPEN_BSD_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_FREE_BSD_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_FREE_BSD_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_FREE_BSD_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_FREE_BSD_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_FREE_BSD_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_FREE_BSD_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_NET_BSD_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_NET_BSD_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_NET_BSD_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_NET_BSD_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_NET_BSD_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_NET_BSD_X86_64");
			break;
		case BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_32:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_32", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_32");
			break;
		case BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_64:
			return tq ? tq_strdup(tq, "BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_64", BPLN) :  bpstrdup("BP_GADGET_HW_PLATFORM_DRAGONFLY_BSD_X86_64");
			break;
		default:
			return NULL;
	}
	return NULL;
}

// BP_GADGET_SOFTWARE_LANGUAGE to heap alloc string.
char * BP_GetSoftwareLanguage(BP_GADGET_SOFTWARE_LANGUAGE software_language, P_BP_LINKL tq)
{
	switch(software_language)
	{
		case BP_GADGET_SOFTWARE_LANGUAGE_UNSET:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_UNSET", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_UNSET");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_PHP4:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_PHP4", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_PHP4");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_PHP5:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_PHP5", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_PHP5");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_PERL:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_PERL", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_PERL");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_RUBY:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_RUBY", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_RUBY");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_BASH:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_BASH", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_BASH");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_SH:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_SH", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_SH");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_ASH:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_ASH", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_ASH");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_CSH:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_CSH", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_CSH");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JSP:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JSP", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JSP");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_CFM:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_CFM", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_CFM");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_GENERIC:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_GENERIC", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_GENERIC");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_CHROME:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_CHROME", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_CHROME");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_FIREFOX:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_CHROME", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_CHROME");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_INTERNET_EXPLORER:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_INTERNET_EXPLORER", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_INTERNET_EXPLORER");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_OPERA:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_OPERA", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_OPERA");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SAFARI:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SAFARI", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SAFARI");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_WEBKIT:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_WEBKIT", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_WEBKIT");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SELENIUM:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SELENIUM", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_JAVASCRIPT_SELENIUM");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_HTML:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_HTML", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_HTML");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_PGSQL:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_PGSQL", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_PGSQL");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_MYSQL:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_MYSQL", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_MYSQL");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_ORACLE:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_ORACLE", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_ORACLE");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_LISP:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_LISP", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_LISP");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_LUA:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_LUA", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_LUA");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_C:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_C", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_C");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_CPP:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_CPP", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_CPP");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_X86_32_ASM:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_X86_32_ASM", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_X86_32_ASM");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_X86_64_ASM:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_X86_64_ASM", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_X86_64_ASM");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_X86_32_BINCODE:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_X86_32_BINCODE", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_X86_32_BINCODE");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_X86_64_BINCODE:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_X86_64_BINCODE", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_X86_64_BINCODE");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_ASM:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_ASM", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_ASM");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_ARM_64_ASM:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_ARM_64_ASM", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_ARM_64_ASM");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_BINCODE:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_BINCODE", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_BINCODE");
			break;
		case BP_GADGET_SOFTWARE_LANGUAGE_ARM_64_BINCODE:
			return tq ? tq_strdup(tq, "BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_BINCODE", BPLN) :  bpstrdup("BP_GADGET_SOFTWARE_LANGUAGE_ARM_32_BINCODE");
			break;
		default:
			return NULL;
	}
	return NULL;
}

// BP_GADGET_TYPE to heap alloc string.
char * BP_GetGadgetType(BP_GADGET_TYPE type, P_BP_LINKL tq)
{
	switch(type)
	{

		case BP_GADGET_TYPE_UNSET:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_UNSET", BPLN) :  bpstrdup("BP_GADGET_TYPE_UNSET");
			break;
		case BP_GADGET_TYPE_OBFUSCATOR:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_OBFUSCATOR", BPLN) :  bpstrdup("BP_GADGET_TYPE_OBFUSCATOR");
			break;
		case BP_GADGET_TYPE_OUTPUT_MAPPER:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_OUTPUT_MAPPER", BPLN) :  bpstrdup("BP_GADGET_TYPE_OUTPUT_MAPPER");
			break;
		case BP_GADGET_TYPE_SYSTEM_INFO:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_SYSTEM_INFO", BPLN) :  bpstrdup("BP_GADGET_TYPE_SYSTEM_INFO");
			break;
		case BP_GADGET_TYPE_PERMISSION_DETERMINATION:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_PERMISSION_DETERMINATION", BPLN) :  bpstrdup("BP_GADGET_TYPE_PERMISSION_DETERMINATION");
			break;
		case BP_GADGET_TYPE_DOWNLOAD_AND_EXECUTE:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_DOWNLOAD_AND_EXECUTE", BPLN) :  bpstrdup("BP_GADGET_TYPE_DOWNLOAD_AND_EXECUTE");
			break;
		case BP_GADGET_TYPE_TROJAN_FILE:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_TROJAN_FILE", BPLN) :  bpstrdup("BP_GADGET_TYPE_TROJAN_FILE");
			break;
		case BP_GADGET_TYPE_INTERACTIVE_SYSTEM_SHELL:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_INTERACTIVE_SYSTEM_SHELL", BPLN) :  bpstrdup("BP_GADGET_TYPE_INTERACTIVE_SYSTEM_SHELL");
			break;
		case BP_GADGET_TYPE_INTERACTIVE_LANGUAGE_SHELL:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_INTERACTIVE_LANGUAGE_SHELL", BPLN) :  bpstrdup("BP_GADGET_TYPE_INTERACTIVE_LANGUAGE_SHELL");
			break;
		case BP_GADGET_TYPE_DATABASE_INFO:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_DATABASE_INFO", BPLN) :  bpstrdup("BP_GADGET_TYPE_DATABASE_INFO");
			break;
		case BP_GADGET_TYPE_DATABASE_DUMP:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_DATABASE_DUMP", BPLN) :  bpstrdup("BP_GADGET_TYPE_DATABASE_DUMP");
			break;
		case BP_GADGET_TYPE_DATABASE_ANALYSIS:
			return tq ? tq_strdup(tq, "BP_GADGET_TYPE_DATABASE_ANALYSIS", BPLN) :  bpstrdup("BP_GADGET_TYPE_DATABASE_ANALYSIS");
			break;

		// return null as default case
		default:
			return NULL;

	}

	// should never get here
	return NULL;

}

// BP_GADGET_CAGETORY to heap alloc string.
char * BP_GetGadgetCategory(BP_GADGET_CAGETORY category, P_BP_LINKL tq)
{

	// Switch based on the category value, fail if lookup fails
	switch(category)
	{
		case BP_GADGET_CATEGORY_UNSET:
			return tq ? tq_strdup(tq, "BP_GADGET_CATEGORY_UNSET", BPLN) : bpstrdup("BP_GADGET_CATEGORY_UNSET");
			break;
		case BP_GADGET_CATEGORY_LOADER:
			return tq ? tq_strdup(tq, "BP_GADGET_CATEGORY_LOADER", BPLN) :  bpstrdup("BP_GADGET_CATEGORY_LOADER");
			break;
		case BP_GADGET_CATEGORY_MAPPER:
			return tq ? tq_strdup(tq, "BP_GADGET_CATEGORY_MAPPER", BPLN) :  bpstrdup("BP_GADGET_CATEGORY_MAPPER");
			break;
		case BP_GADGET_CATEGORY_WRITER:
			return tq ? tq_strdup(tq, "BP_GADGET_CATEGORY_WRITER", BPLN) :  bpstrdup("BP_GADGET_CATEGORY_WRITER");
			break;
		case BP_GADGET_CATEGORY_BACKDOOR:
			return tq ? tq_strdup(tq, "BP_GADGET_CATEGORY_BACKDOOR", BPLN) :  bpstrdup("BP_GADGET_CATEGORY_BACKDOOR");
			break;
		default:
			return NULL;
	}

	// return null in the case of lookup failure
	return NULL;

}


// returns a gadget argument type, allocated via tail queue allocator.
char * BP_GetGadgetArgumentType(BP_GADGET_ARG_TYPE type, P_BP_LINKL tq)
{

	// Switch based on the category value, fail if lookup fails
	switch(type)
	{
		case BP_GADGET_ARG_TYPE_UNSET:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_UNSET", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_UNSET");
			break;
		case BP_GADGET_ARG_TYPE_CHAR_STRING:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_CHAR_STRING", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_CHAR_STRING");
			break;
		case BP_GADGET_ARG_TYPE_UCHAR_STRING:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_UCHAR_STRING", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_UCHAR_STRING");
			break;
		case BP_GADGET_ARG_TYPE_UINT64:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_UINT64", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_UINT64");
			break;
		case BP_GADGET_ARG_TYPE_UINT32:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_UINT32", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_UINT32");
			break;
		case BP_GADGET_ARG_TYPE_UINT16:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_UINT16", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_UINT16");
			break;
		case BP_GADGET_ARG_TYPE_UINT8:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_UINT8", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_UINT8");
			break;
		case BP_GADGET_ARG_TYPE_INT32:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_INT32", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_INT32");
			break;
		case BP_GADGET_ARG_TYPE_INT16:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_INT16", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_INT16");
			break;
		case BP_GADGET_ARG_TYPE_INT8:
			return tq ? tq_strdup(tq, "BP_GADGET_ARG_TYPE_INT8", BPLN) : bpstrdup("BP_GADGET_ARG_TYPE_INT8");
			break;
		default:
			return NULL;
	}

	// return null in the case of lookup failure
	return NULL;

}

