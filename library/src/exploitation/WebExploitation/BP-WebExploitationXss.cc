/*
 * BP-WebExploitationXss.cc
 *
 *  Created on: Apr 3, 2009
 *      Author: root
 */

#include "../../../include/BP-Main.h"


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%% XSS Tests %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// XSS Type Tests (array of BP_WEB_EXPLOIT_TEST types)
BP_WEB_XSS_TEST xssTests[] =
{

		// Test 1: Basic Script Injection
		{
				"<script>",  // front
				"</script>", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG,  // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 2: Body OnLoad
		{
				"<body \"\0", // front
				"\"></body>\0", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 3: Img OnMouseOver
		{
				"<img%20src=\"\" \0", // front
				"\"></img>\0", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 4: Terminate Comment Recomment Script Injection
		{
				"<script>\0", // front
				"</script>\0", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		}

};

// Generate XSS Test Array
P_BP_WEB_XSS_TEST BP_XSSGenerateArray()
{

	// Make space for the xss test set
	P_BP_WEB_XSS_TEST pXssTests = (P_BP_WEB_XSS_TEST) bpcalloc(sizeof(xssTests), 1);

	// NULL OOM Check
	if(pXssTests == NULL)
		return NULL;

	// set test count
	size_t test_count = BP_GetXSSTestCount();

	// copy in structure and return the new awesome ass structure
	size_t x = 0;
	for(x = 0; x < test_count; x++)
	{

		// duplicate test strings
		pXssTests[x].testFront  = bpstrdup(xssTests[x].testFront);
		pXssTests[x].testTail   = bpstrdup(xssTests[x].testTail);

		// set test variables
		pXssTests[x].attackLevel = xssTests[x].attackLevel;
		pXssTests[x].policy      = xssTests[x].policy;
		pXssTests[x].type        = xssTests[x].type;

	}

	return pXssTests;

}


// XSS Type Tests (array of BP_WEB_EXPLOIT_TEST types)
BP_WEB_XSS_TEST dummyXssTests[] =
{

		// Test 1: Basic Script Injection
		{
				"<script>",  // front
				"</script>", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG,  // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 2: Body OnLoad
		{
				"<body>\0", // front
				"\"></body>\0", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 3: Img OnMouseOver
		{
				"<img\0", // front
				"\"></ing>\0", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 4: Terminate Comment Recomment Script Injection
		{
				"--><script>\0", // front
				"</script><!--\0", // back
				BP_WEB_EXPLOIT_TYPE_XSS, // type
				BP_XSS_IS_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		},

		// Test 5: inline onMouseOver exploitation
		{
				"\"%20onmouseover=\"\0",
				"\"\0",
				BP_WEB_EXPLOIT_TYPE_XSS,
				BP_XSS_IN_TAG, // policy
				BP_XSS_ATTACK_UNSAFE // attack level
		}

};


// Generate XSS Test Array
P_BP_WEB_XSS_TEST BP_XSSGenerateDummyArray()
{

	// Make space for the xss test set
	P_BP_WEB_XSS_TEST pXssTests = (P_BP_WEB_XSS_TEST) bpcalloc(sizeof(dummyXssTests), 1);

	// NULL OOM Check
	if(pXssTests == NULL)
		return NULL;

	// set dummy count
	size_t dummy_count = BP_GetXSSDummyTestCount();

	// copy in structure and return the new awesome ass structure
	size_t x = 0;
	for
	(
			x = 0;
			x < dummy_count;
			x++
	)
	{

		// duplicate test strings
		pXssTests[x].testFront  = bpstrdup(dummyXssTests[x].testFront);
		pXssTests[x].testTail   = bpstrdup(dummyXssTests[x].testTail);

		// set test variables
		pXssTests[x].attackLevel = dummyXssTests[x].attackLevel;
		pXssTests[x].policy      = dummyXssTests[x].policy;
		pXssTests[x].type        = dummyXssTests[x].type;

	}

	// return the tests
	return pXssTests;

}


// Generate XSS Test Array
P_BP_WEB_XSS_TEST BP_XSSGenerateRandomArray()
{

	// set the test count
	size_t test_count = 4;

	// Make space for the xss test set
	P_BP_WEB_XSS_TEST pXssTests = (P_BP_WEB_XSS_TEST) bpcalloc(sizeof(BP_WEB_XSS_TEST) * (test_count+1), 1);
	if(pXssTests == NULL)
		return NULL;

	// join string, used for building tests
	char * join_str_front = NULL;
	char * join_str_tail  = NULL;

	// join string stack
	char * join_str_stack[10];

	// zero the string stack
	BP_ZERO_STACK(join_str_stack);

	// set index iterator
	size_t x = 0;

	// set the random string
	char *random_str = NULL;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Generate First Test %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// generate random front part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "<";
	join_str_stack[1] = random_str;
	join_str_stack[2] = ">";

	// join the string to create front of test
	join_str_front = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// generate random tail part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "</";
	join_str_stack[1] = random_str;
	join_str_stack[2] = ">";

	// join the string to create the tail test
	join_str_tail = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// duplicate test strings
	pXssTests[x].testFront  = join_str_front;
	pXssTests[x].testTail   = join_str_tail;

	// set test variables
	pXssTests[x].attackLevel = BP_XSS_ATTACK_UNSAFE;
	pXssTests[x].policy      = BP_XSS_IN_TAG;
	pXssTests[x].type        = BP_WEB_EXPLOIT_TYPE_XSS;
	x++;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Generate Second Test %%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// generate random front part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "\"%20";
	join_str_stack[1] = random_str;
	join_str_stack[2] = "=";

	// join the string to create front of test
	join_str_front = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// generate random tail part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "\"";
	join_str_stack[1] = random_str;
	join_str_stack[2] = "\"";

	// join the string to create the tail test
	join_str_tail = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// duplicate test strings
	pXssTests[x].testFront  = join_str_front;
	pXssTests[x].testTail   = join_str_tail;

	// set test variables
	pXssTests[x].attackLevel = BP_XSS_ATTACK_UNSAFE;
	pXssTests[x].policy      = BP_XSS_IN_TAG;
	pXssTests[x].type        = BP_WEB_EXPLOIT_TYPE_XSS;
	x++;


	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Generate Third Test %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// generate random front part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "\"<";
	join_str_stack[1] = random_str;
	join_str_stack[2] = ">";

	// join the string to create front of test
	join_str_front = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// generate random tail part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "<";
	join_str_stack[1] = random_str;
	join_str_stack[2] = ">\"";

	// join the string to create the tail test
	join_str_tail = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// duplicate test strings
	pXssTests[x].testFront  = join_str_front;
	pXssTests[x].testTail   = join_str_tail;

	// set test variables
	pXssTests[x].attackLevel = BP_XSS_ATTACK_UNSAFE;
	pXssTests[x].policy      = BP_XSS_IN_TAG;
	pXssTests[x].type        = BP_WEB_EXPLOIT_TYPE_XSS;
	x++;



	// return the tests
	return pXssTests;

}


// Runs XSS Tests against an anchor
P_BP_WEB_XSS_TEST_RESULT BP_XSSRunTestsAgainstAnchor
(
		P_BP_WEB_XSS_TEST     tests,
		P_BP_HTML_ANCHOR_LIST anchor,
		P_BP_HTTP_SESSION     session,
		BP_XSS_ATTACK_LEVEL   attackLevel,
		size_t                secondsBetweenTest,
		size_t                maxTests
)
{

	// NULL Checks
	if(!tests || !anchor || !session)
		return NULL;

	// Make sure the anchor has vars
	if(!anchor->vars)
		return NULL;

	// Count the number of variables in the anchor
	P_BP_HTML_ANCHOR_VAR_LIST tmpVars = anchor->vars;
	size_t anchorVarCount = 0;

	for
	(
		tmpVars = tmpVars->first;
		tmpVars;
		tmpVars = tmpVars->next
	)
	{
		anchorVarCount++;
	}

	// make sure we have injectable parameters
	if(anchorVarCount == 0)
		return NULL;

	// get number of tests
	// size_t testCount = sizeof(xssTests) / sizeof(BP_WEB_XSS_TEST);

	// get number of variables

	// Attack anchor (realloced in loop with new values)
	char *attackAnchor = NULL;

	// XSS Variable Loop Counter
	int i = 0;
	int x = 0;

	size_t testCount = 0;

	// walk the xss tests
	for
	(
		i = 0;
		i < testCount;
		i++
	)
	{


		// one test per anchor element
		for
		(
			x = 0;
			x < anchorVarCount;
			x++
		)
		{}

/*
		// Anchor Structure
		typedef struct _BP_HTML_ANCHOR_LIST{

			// anchor number
			size_t num;

			// anchor leads offsite, TRUE/FALSE
			size_t offsite;

			// delimiter set used to extract variables from the string
			P_BP_HTML_ANCHOR_DELIMITERS delims;

			// RAW unparsed href
			char * href;

			// Anchor Protocol
			BP_ANCHOR_PROTO proto;

			// bpstrnduped protocol string
			char * protoStr;

			// All embedded variables found in the string
			P_BP_HTML_ANCHOR_VAR_LIST vars;

			// Anchor Path relative to site rootdir
			char * relativePath;

			// Linked List Pointers
			struct _BP_HTML_ANCHOR_LIST *first;
			struct _BP_HTML_ANCHOR_LIST *prev;
			struct _BP_HTML_ANCHOR_LIST *next;

		} BP_HTML_ANCHOR_LIST, *P_BP_HTML_ANCHOR_LIST;
*/

	}

	return NULL;
}

// Runs XSS Tests against a form
P_BP_WEB_XSS_TEST_RESULT BP_XSSRunTestsAgainstForm(P_BP_WEB_XSS_TEST tests, P_BP_HTML_FORM_LIST anchor, P_BP_HTTP_SESSION session, BP_XSS_ATTACK_LEVEL attackLevel, size_t secondsBetweenTest, size_t maxTests)
{

	return NULL;
}


// Runs XSS Tests against a cookie (cookies still need to be implemented)
// P_BP_WEB_XSS_TEST_RESULT BP_XSSRunTestsAgainstAnchor(P_BP_WEB_XSS_TEST tests, P_BP_HTML_COOKIE_LIST anchor, P_BP_HTTP_SESSION session, BP_XSS_ATTACK_LEVEL attackLevel);


// XSS Test Count Retrieval: Gets the size of the array and divides it by the size of the
// test structure in order to return a number of tests.
size_t BP_GetXSSTestCount()
{
	return (sizeof(xssTests) / sizeof(BP_WEB_XSS_TEST)) - 1;
}

// DUMMY ARRAY XSS Test Count Retrieval: Gets the size of the array and divides it by the size of the
// test structure in order to return a number of tests.
size_t BP_GetXSSDummyTestCount()
{
	return (sizeof(dummyXssTests) / sizeof(BP_WEB_XSS_TEST)) - 1;
}

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of XSS Tests
size_t BP_DestroyXSSTests(BP_WEB_XSS_TEST * tests, size_t test_count)
{

	// ensure we have tests
	if(!tests)
		return ERR_FAILURE;

	// walk test array destroying duplicated strings
	size_t x = 0;
	for(x = 0; tests[x].testFront; x++)
	{

		bpfree(tests[x].testFront);
		bpfree(tests[x].testTail);
	}

	// destroy full structure
	bpfree(tests);

	// return indicating success
	return ERR_SUCCESS;

}


// Destroys an XSS Result List
size_t BP_DestroyXSSResults(P_BP_WEB_XSS_TEST_RESULT results)
{

	// exit if we have no results
	if(!results)
		return ERR_FAILURE;

	// save first pointer (makes walking list elements easier)
	P_BP_WEB_XSS_TEST_RESULT savedFirst = results->first;

	// used for destroying list elements one at a time
	P_BP_WEB_XSS_TEST_RESULT savedNext = NULL;


	// IMPORTANT NOTE: DO NOT DESTROY FORMS OR ANCHORS, THOSE ARE DESTROYED BY HTML
	// UTILITIES.

	for
	(
			results = results->first;
			results;
			results = results->next
	)
	{

		// destroy test strings
		bpfree(results->anchorActualTest);
		bpfree(results->formActualTest);

	}

	// Destroy results one by one
	for
	(
		results = savedFirst;
		results;
		results = savedNext
	)
	{

		// save next pointer
		savedNext = results->next;

		// destroy element
		bpfree(results);

	}

	// return indicating success
	return ERR_SUCCESS;

}
