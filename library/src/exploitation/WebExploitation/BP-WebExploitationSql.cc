/*
 * BP-WebExploitationSql.cc
 *
 *  Created on: Apr 3, 2009
 *      Author: root
 */

#include "../../../include/BP-Main.h"


// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%% SQL Injection Tests %%%%%%%%%%%%%%%%%%%%



// SQL Type Tests (array of BP_WEB_EXPLOIT_TEST types)
BP_WEB_SQLINJ_TEST sqlTests[] = {

		// Test 1: Basic Script Injection
		{
				"'",  // front
				"--", // back
				BP_WEB_EXPLOIT_TYPE_SQLINJ, // type
				BP_SQLINJ_NO_VERIFICATION,  // policy
				BP_SQLINJ_ATTACK_SAFE // attack level
		},



		// test terminator
		{NULL, NULL, BP_WEB_EXPLOIT_TYPE_NONE, BP_SQLINJ_NONE, BP_SQLINJ_ATTACK_UNSAFE}
};


// DUMMYSQL Type Tests (array of BP_WEB_EXPLOIT_TEST types)
BP_WEB_SQLINJ_TEST sqlDummyTests[] = {

		// Test 1: Basic Script Injection
		{
				"'",  // front
				"?", // back
				BP_WEB_EXPLOIT_TYPE_SQLINJ, // type
				BP_SQLINJ_NO_VERIFICATION,  // policy
				BP_SQLINJ_ATTACK_SAFE // attack level
		},


		// test terminator
		{NULL, NULL, BP_WEB_EXPLOIT_TYPE_NONE, BP_SQLINJ_NONE, BP_SQLINJ_ATTACK_UNSAFE}
};


// Generate SQL Injection Test Array
P_BP_WEB_SQLINJ_TEST BP_SQLGenerateArray()
{

	// Make space for the sql test set
	P_BP_WEB_SQLINJ_TEST pSqlTests = (P_BP_WEB_SQLINJ_TEST) bpcalloc(sizeof(sqlTests), 1);


	// NULL OOM Check
	if(pSqlTests == NULL)
		return NULL;

	// copy in structure and return the new structure
	size_t x = 0;
	for(x = 0; x < BP_GetSQLTestCount(); x++)
	{

		// duplicate test strings
		pSqlTests[x].testFront  = bpstrdup(sqlTests[x].testFront);
		pSqlTests[x].testTail   = bpstrdup(sqlTests[x].testTail);

		// set test variables
		pSqlTests[x].attackLevel = sqlTests[x].attackLevel;
		pSqlTests[x].policy      = sqlTests[x].policy;
		pSqlTests[x].type        = sqlTests[x].type;

	}

	return pSqlTests;

}



// Generate SQL Injection Test Array
P_BP_WEB_SQLINJ_TEST BP_SQLGenerateDummyArray()
{

	size_t dummy_test_count = BP_GetSQLDummyTestCount();
	dummy_test_count++;

	// Make space for the sql test set
	P_BP_WEB_SQLINJ_TEST pSqlTests = (P_BP_WEB_SQLINJ_TEST) bpcalloc(dummy_test_count * sizeof(BP_WEB_SQLINJ_TEST), 1);
	if(pSqlTests == NULL)
		return NULL;

	// copy in structure and return the new structure
	size_t x = 0;
	for
	(
		x = 0;
		x < dummy_test_count-1;
		x++
	)
	{

		// duplicate test strings
		pSqlTests[x].testFront  = bpstrdup(sqlDummyTests[x].testFront);
		pSqlTests[x].testTail   = bpstrdup(sqlDummyTests[x].testTail);

		// set test variables
		pSqlTests[x].attackLevel = sqlDummyTests[x].attackLevel;
		pSqlTests[x].policy      = sqlDummyTests[x].policy;
		pSqlTests[x].type        = sqlDummyTests[x].type;

	}

	// return the filled out tests
	return pSqlTests;

}


// Generates random array of sql tests.
P_BP_WEB_SQLINJ_TEST BP_SQLGenerateRandomArray()
{

	// set count
	size_t dummy_test_count = 5;

	// Make space for the sql test set
	P_BP_WEB_SQLINJ_TEST pSqlTests = (P_BP_WEB_SQLINJ_TEST) bpcalloc(dummy_test_count * sizeof(BP_WEB_SQLINJ_TEST), 1);
	if(pSqlTests == NULL)
		return NULL;

	// declare the join members
	char * join_str_front = NULL;
	char * join_str_tail  = NULL;
	char * join_str_stack[10];
	BP_ZERO_STACK(join_str_stack);

	// random string
	char * random_str = NULL;

	// iterator for test generation
	size_t x = 0;

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%% Generate First Test %%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	// generate random front part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "\"";
	join_str_stack[1] = random_str;
	join_str_stack[2] = "`";

	// join the string to create front of test
	join_str_front = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// generate random tail part
	random_str = BP_GenRandomASCIICharString(BP_GenRandomUnsignedLong(2,4), BP_GEN_RANDOM_ASCII_STRING_TYPE_ALPHA_CAPS_OR_LOWER);
	join_str_stack[0] = "'";
	join_str_stack[1] = random_str;
	join_str_stack[2] = "--";

	// join the string to create the tail test
	join_str_tail = BP_JoinStringArray((char **)&join_str_stack, 3);
	if(random_str)
		bpfree(random_str);

	// duplicate test strings
	pSqlTests[x].testFront  = join_str_front;
	pSqlTests[x].testTail   = join_str_tail;

	// set test variables
	pSqlTests[x].attackLevel = BP_SQLINJ_ATTACK_SAFE;
	pSqlTests[x].policy      = BP_SQLINJ_NO_VERIFICATION;
	pSqlTests[x].type        = BP_WEB_EXPLOIT_TYPE_SQLINJ;
	x++;

	// return the tests
	return pSqlTests;

}


// SQL Test Count Retrieval: Gets the size of the array and divides it by the size of the
// test structure in order to return a number of tests.
size_t BP_GetSQLTestCount(){
	return sizeof(sqlTests) / sizeof(BP_WEB_SQLINJ_TEST)-1;
}

// SQL Dummy test count retrieval
size_t BP_GetSQLDummyTestCount(){
	return sizeof(sqlDummyTests) / sizeof(BP_WEB_SQLINJ_TEST)-1;
}



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of XSS Tests
size_t BP_DestroySQLTests(BP_WEB_SQLINJ_TEST * tests, size_t test_count)
{

	if(!tests)
		return ERR_FAILURE;

	// walk test array destroying duplicated strings
	size_t x = 0;
	for
	(
			x = 0;
			tests[x].testFront;
			x++
	)
	{

		bpfree(tests[x].testFront);
		tests[x].testFront = NULL;
		bpfree(tests[x].testTail);
		tests[x].testTail = NULL;

	}

	// destroy full structure
	bpfree(tests);

	// return indicating success
	return ERR_SUCCESS;

}


// Destroys an SQL Result List (ALWAYS DESTROYS FROM ->first)
size_t BP_DestroySQLResults(P_BP_WEB_SQLINJ_TEST_RESULT results)
{

	if(!results)
		return ERR_FAILURE;

	// save first pointer (makes walking list elements easier)
	P_BP_WEB_SQLINJ_TEST_RESULT savedFirst = results->first;

	// used for destroying list elements one at a time
	P_BP_WEB_SQLINJ_TEST_RESULT savedNext = NULL;


	// IMPORTANT NOTE: DO NOT DESTROY FORMS OR ANCHORS, THOSE ARE DESTROYED BY HTML
	// UTILITIES.

	for
	(
		results = results->first;
		results;
		results = results->next
	)
	{

		// destroy test strings
		bpfree(results->anchorActualTest);

		// destroy form input test
		bpfree(results->actualInputTest);

		// destroy match indexes if they exist (all one buffer per)
		if(results->msqlTestMatchIndexes)
			bpfree(results->msqlTestMatchIndexes);

		if(results->mysqlTestMatchIndexes)
			bpfree(results->mysqlTestMatchIndexes);

		if(results->postgresTestMatchIndexes)
			bpfree(results->postgresTestMatchIndexes);

		if(results->pgsqlTestMatchIndexes)
			bpfree(results->pgsqlTestMatchIndexes);

		if(results->odbcTestMatchIndexes)
			bpfree(results->odbcTestMatchIndexes);

		if(results->oracleTestMatchIndexes)
			bpfree(results->oracleTestMatchIndexes);


		// destroy engines which were detected
		if(results->enginesDetected)
			bpfree(results->enginesDetected);

	}

	// Destroy results one by one
	for
	(
		results = savedFirst;
		results;
	)
	{

		// save next pointer
		savedNext = results->next;

		// destroy element
		bpfree(results);

		// move pointer up
		results = savedNext;

	}

	// return indicating success
	return ERR_SUCCESS;

}

