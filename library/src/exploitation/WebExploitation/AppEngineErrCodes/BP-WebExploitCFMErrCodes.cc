/*
 * BP-WebExploitCFMErrCodes.cc
 *
 *  Created on: Apr 7, 2009
 *      Author: root
 */

#include "../../../../include/BP-Main.h"

// JM Note: There is no one central repository of ColdFusion error codes,
// so instead, i use tags and exceptions (some cf exceptions fall into other exception
// bodies such as J2EE).

BP_CFM_ERR_CODES cfmErrCodes[] = {
		{(char *)"<cfquery"},
		{(char *)"<cfset"},
		{(char *)"datasource="},
		{(char *)"sql.Executive.executeQuery"},
		{(char *)"sql.imq.imqException"},
		{(char *)"servlet.ServletInvoker"}
};


// Generates an allocated array of Msql error codes
P_BP_CFM_ERR_CODES BP_CFMGenErrCodeArray()
{

	size_t retSize = sizeof(cfmErrCodes);
	P_BP_CFM_ERR_CODES retTable = (P_BP_CFM_ERR_CODES) bpcalloc(retSize, 1);
	if(!retTable)
		return NULL;

	// calculate the number of entries in the table
	size_t num_entries = retSize / sizeof(BP_CFM_ERR_CODES);

	// duplicate the array
	size_t x = 0;
	for(x = 0; x < num_entries; x++)
	{

		// duplicate string in table
		retTable[x].description = bpstrdup(cfmErrCodes[x].description);

	}

	// return the table
	return retTable;

}


// Generates a list of error code tests based around the
// error code array defined above.  This set is basically
// a string array w/o format strings.
P_BP_FMT_ERR_TESTS BP_CFMGenErrTestsFromErrCodeArray(P_BP_CFM_ERR_CODES inCodes, size_t numCodes, char **fmtReplacementTable){

	if(!inCodes)
		return NULL;

	size_t i = 0;
	P_BP_FMT_ERR_TESTS genSet = NULL;
	BP_FMT_ERR_TESTS * retSet = NULL;


	// set code array pointer into an indexable typedef
	BP_CFM_ERR_CODES * testCodes = (P_BP_CFM_ERR_CODES) inCodes;


	for(i = 0; i < numCodes; i++)
	{

		// increase the size of the return set
		retSet = (BP_FMT_ERR_TESTS *) bprealloc(retSet, ((i+1) * sizeof(BP_FMT_ERR_TESTS)) + sizeof(BP_FMT_ERR_TESTS));

		// generate match set from a string
		genSet = BP_GenerateMatchSetFromTestString(testCodes[i].description, bpstrlen(testCodes[i].description), fmtReplacementTable);
		if(!genSet)
			return NULL;

		// copy in the array data
		memcpy(&retSet[i], genSet, sizeof(BP_FMT_ERR_TESTS));

		// destroy chunk structure (dont destroy internal pointers)
		bpfree(genSet);
		genSet = NULL;

	}

	// return the filled out structure
	return (P_BP_FMT_ERR_TESTS) retSet;

}

// Returns the total number of checks within the msql array.
size_t BP_CFMErrCount(){

	size_t retCount = sizeof(cfmErrCodes) / sizeof(BP_CFM_ERR_CODES);
	return retCount;
}

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of Cold Fusion error code allocations
size_t BP_DestroyCFMErrCodes(BP_CFM_ERR_CODES * codes){

	if(!codes)
		return ERR_FAILURE;

	size_t x = 0;
	for(x = 0; x < BP_CFMErrCount(); x++){
		bpfree(codes[x].description);
	}

	// NO MORE FREE CODE, NO MORE, NONE lol (memory 4free tho | bovice)
	bpfree(codes);

	// return success
	return ERR_SUCCESS;
}

