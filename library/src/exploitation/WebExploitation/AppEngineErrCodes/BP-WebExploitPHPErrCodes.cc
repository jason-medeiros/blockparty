/*
 * BP-WebExploitPHPErrCodes.cc
 *
 *  Created on: Apr 7, 2009
 *      Author: root
 */

#include "../../../../include/BP-Main.h"

BP_PHP_ERR_CODES phpErrCodes[] = {
	{(char *) ": eval()'d code%s on line" },
	{(char*) "Wrong parameter count for strncasecmp() in %s on line %d"},
	{(char*) "Length must be greater than or equal to 0 in %s on line %d"},
	{(char*) "test() has been disabled for security reasons in %s on line %d"},
	{(char*) "Wrong parameter count for get_resource_type() in %s on line %d"},
	{(char*) "Supplied argument is not a valid resource handle in %s on line %d"},
	{(char*) "get_loaded_extensions() expects at most 1 parameter, 2 given in %s on line %d"},
	{(char*) "Wrong parameter count for get_defined_constants() in %s on line %d"},
	{(char*) "Wrong parameter count for get_defined_functions() in %s on line %d"},
	{(char*) "Wrong parameter count for get_declared_interfaces() in %s on line %d"},
	{(char*) "Wrong parameter count for get_extension_funcs() in %s on line %d"},
	{(char*) "func_get_arg(): Called from the global scope - no function context in %s on line %d"},
	{(char*) "func_get_arg(): Argument 1 not passed to function in %s on line %d"},
	{(char*) "interface_exists() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "interface_exists() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "Illegal offset type in %s on line %d"},
	{(char*) "Invalid argument supplied for foreach() in %s on line %d"},
	{(char*) "(Registered shutdown functions) Unable to call self::on_shutdown() - function does not exist in Unknown on line 0"},
	{(char*) "set_exception_handler() expects the argument (fo) to be a valid callback in %s on line %d"},
	{(char*) "set_exception_handler() expects the argument (::) to be a valid callback in %s on line %d"},
	{(char*) "Wrong parameter count for set_exception_handler() in %s on line %d"},
	{(char*) "Wrong parameter count for constant() in %s on line %d"},
	{(char*) "constant(): Couldn't find constant in %s on line %d"},
	{(char*) "constant(): Couldn't find constant Array in %s on line %d"},
	{(char*) "Wrong parameter count for strcasecmp() in %s on line %d"},
	{(char*) "Constants may only evaluate to scalar values in %sbug37811.php on line %d"},
	{(char*) "class_exists() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "class_exists() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "Missing argument 1 for test2(), called in %s on line %d and defined in %s on line %d"},
	{(char*) "Missing argument 2 for test3() in %s on line %d"},
	{(char*) "func_get_args(): Called from the global scope - no function context in %s on line %d"},
	{(char*) "Division by zero in %s on line %d"},
	{(char*) "Wrong parameter count for trigger_error() in %s on line %d"},
	{(char*) "Invalid error type specified in %s on line %d"},
	{(char*) "error in %s on line %d"},
	{(char*) "Missing argument 1 for NormalTest(), called in %sbug33996.php on line %d and defined in %sbug33996.php on line %d"},
	{(char*) "Wrong parameter count for each() in %s on line %d"},
	{(char*) "Variable passed to each() is not an array or object in %s on line %d"},
	{(char*) "session_start(): Cannot send session cookie - headers already sent by (output started at %sunset_cv05.php on line %d"},
	{(char*) "session_start(): Cannot send session cache limiter - headers already sent (output started at %sunset_cv05.php:%d) in %sunset_cv05.php on line %d"},
	{(char*) "fopen(/tmp/blah): failed to open stream: No such file or directory in %s on line %d"},
	{(char*) "define() expects at least 2 parameters, 0 given in %s on line %d"},
	{(char*) "define() expects at least 2 parameters, 1 given in %s on line %d"},
	{(char*) "define() expects parameter 3 to be boolean, array given in %s on line %d"},
	{(char*) "define() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "Constants may only evaluate to scalar values in %s on line %d"},
	{(char*) "Invalid argument supplied for foreach() in %sbug36303.php on line 3"},
	{(char*) "feof(): wrapper::stream_eof is not implemented! Assuming EOF in %s on line %d"},
	{(char*) "Wrong parameter count for property_exists() in %s on line %d"},
	{(char*) "First parameter must either be an object or the name of an existing class in %s on line %d"},
	{(char*) "func_get_arg(): The argument number should be >= 0 in %s on line %d"},
	{(char*) "func_get_arg(): Argument 0 not passed to function in %s on line %d"},
	{(char*) "func_get_arg(): Argument 2 not passed to function in %s on line %d"},
	{(char*) "array_walk(): Unable to call Array() - function does not exist in %s on line %d"},
	{(char*) "Cannot use a scalar value as an array in %s on line %d"},
	{(char*) "get_class() called without object from outside a class in %s on line %d"},
	{(char*) "Wrong parameter count for strncmp() in %s on line %d"},
	{(char*) "Wrong parameter count for get_included_files() in %s on line %d"},
	{(char*) "Missing argument 1 for test2(), called in %s on line %d"},
	{(char*) "func_num_args(): Called from the global scope - no function context in %s on line %d"},
	{(char*) "phpinfo() has been disabled for security reasons in %s on line %d"},
	{(char*) "realpath(): open_basedir restriction in effect. File(%s\\test\\bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "realpath(): open_basedir restriction in effect. File(%s\\test\\bad\\bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "realpath(): open_basedir restriction in effect. File(%s\\test) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "realpath(): open_basedir restriction in effect. File(%s\\) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "symlink(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(): open_basedir restriction in effect. File(%s/test/ok/symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(../bad/./bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "touch(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filegroup(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_executable(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "tempnam(): open_basedir restriction in effect. File() is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "ini_set(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "ini_set(): open_basedir restriction in effect. File(%s/test/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "ini_set(): open_basedir restriction in effect. File(%s/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "readlink(): open_basedir restriction in effect. File(symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "readlink(): open_basedir restriction in effect. File(../ok/symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "readlink(): open_basedir restriction in effect. File(../ok/./symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "readlink(): open_basedir restriction in effect. File(./symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "readlink(): open_basedir restriction in effect. File(%s/test/ok/symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_file(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "lstat(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "symlink(): open_basedir restriction in effect. File(%s/test/bad/symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "symlink(): open_basedir restriction in effect. File(%s/test/symlink.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "symlink(): open_basedir restriction in effect. File(%s/test/bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_exists(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(../bad): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(../bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(..): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(../): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(/): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(../bad/.): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(%s/test/bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "opendir(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "opendir(%s/test/bad/../bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filectime(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(../bad): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): (errno 1): %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(../bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(..): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(../): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(/): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(../bad/.): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(%s/test/bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "scandir(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "scandir(%s/test/bad/../bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "link(): open_basedir restriction in effect. File(%s/test/bad/link.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "link(): open_basedir restriction in effect. File(%s/test/link.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "link(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "link(): open_basedir restriction in effect. File(%s/test/bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_link(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(): open_basedir restriction in effect. File(.././bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(): open_basedir restriction in effect. File(../bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(): open_basedir restriction in effect. File(./.././bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "stat(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "disk_free_space(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "error_log(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "error_log(%s/test/bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "error_log(): open_basedir restriction in effect. File(%s/test/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "error_log(%s/test/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "error_log(): open_basedir restriction in effect. File(%s/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "error_log(%s/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileinode(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_writable(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(../bad): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(..): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(../): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(/): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(../bad/.): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(%s/test/bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file(%s/test/bad/../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_put_contents(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_put_contents(../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_put_contents(): open_basedir restriction in effect. File(.././bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_put_contents(.././bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_put_contents(): open_basedir restriction in effect. File(../bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_put_contents(../bad/../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_put_contents(): open_basedir restriction in effect. File(./.././bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_put_contents(./.././bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_put_contents(): open_basedir restriction in effect. File%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_put_contents%s/test/bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_dir(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filesize(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filemtime(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileatime(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileowner(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chdir(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chdir(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chdir(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chdir(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chdir(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chdir(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(../bad): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(..): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(../): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(/): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(../bad/.): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(%s/test/bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "file_get_contents(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "file_get_contents(%s/test/bad/../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "unlink(copy.txt): No such file or directory in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "is_readable(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(../bad): failed to open stream: %s in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(..): failed to open stream: %s in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(../): failed to open stream: %s in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(/): failed to open stream: %s in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(../bad/.): failed to open stream: %s in %s on line %d"},
	{(char*) "fopen(): open_basedir restriction in effect. File(../bad/./bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(../bad/./bad.txt): failed to open stream: %s in %s on line 12"},
	{(char*) "fopen(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fopen(./../.): failed to open stream: %s in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "fileperms(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rename(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rename(): open_basedir restriction in effect. File(.././bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rename(): open_basedir restriction in effect. File(../bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rename(): open_basedir restriction in effect. File(./.././bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rename(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(../bad): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(../bad/bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(..): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(../): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(/): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(../bad/.): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(../bad/./bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(../bad/./bad.txt): failed to open stream: %s in %s on line %d"},
	{(char*) "copy(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "copy(./../.): failed to open stream: %s in %s on line %d"},
	{(char*) "mkdir(): open_basedir restriction in effect. File(../bad/blah) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "mkdir(): open_basedir restriction in effect. File(../blah) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "mkdir(): open_basedir restriction in effect. File(../bad/./blah) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "mkdir(): open_basedir restriction in effect. File(./.././blah) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "filetype(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(../bad): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(../bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(..): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(../): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(/): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(../bad/.): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(%s/test/bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(%s/test/bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "dir(): open_basedir restriction in effect. File(%s/test/bad/../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "dir(%s/test/bad/../bad/bad.txt): failed to open dir: %s in %s on line %d"},
	{(char*) "parse_ini_file(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "parse_ini_file(../bad): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "parse_ini_file(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "parse_ini_file(../bad/bad.txt): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "parse_ini_file(..): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "parse_ini_file(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "parse_ini_file(../): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "parse_ini_file(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "parse_ini_file(../bad/.): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "parse_ini_file(): open_basedir restriction in effect. File(../bad/./bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "parse_ini_file(../bad/./bad.txt): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "parse_ini_file(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "parse_ini_file(./../.): failed to open stream: Operation not permitted in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(../bad/bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(..) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(../) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(../bad/.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(../bad/./bad.txt) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "chmod(): open_basedir restriction in effect. File(./../.) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rmdir(): open_basedir restriction in effect. File(../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rmdir(): open_basedir restriction in effect. File(.././bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rmdir(): open_basedir restriction in effect. File(../bad/../bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rmdir(): open_basedir restriction in effect. File(./.././bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "rmdir(): open_basedir restriction in effect. File(%s/test/bad) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "include(file-which-does-not-exist-on-purpose.php): failed to open stream: No such file or directory in %sbug43958.php on line 5"},
	{(char*) "include(): Failed opening 'file-which-does-not-exist-on-purpose.php' for inclusion (include_path='%s') in %sbug43958.php on line 5"},
	{(char*) "Cannot use a scalar value as an array in %sbug29893.php on line %d"},
	{(char*) "Invalid argument supplied for foreach() in %sbug29566.php on line %d"},
	{(char*) "Invalid argument supplied for foreach() in %s on line %d"},
	{(char*) "Invalid argument supplied for foreach() in %sbug27468.php on line 4"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, 'foo::bar' was given in %sbug27504.php on line %d"},
	{(char*) "Call to private Derived::__destruct() from context '' during shutdown ignored in Unknown on line %d"},
	{(char*) "Call to protected test::__destruct() from context '' during shutdown ignored in Unknown on line 0"},
	{(char*) "Attempt to %s property of non-object in %s on line 18"},
	{(char*) "Attempt to assign property of non-object in %s on line 22"},
	{(char*) "Attempt to assign property of non-object in %s on line 26"},
	{(char*) "call_user_func(UndefC::test): First argument is expected to be a valid callback in %s on line %d"},
	{(char*) "Cannot modify header information - headers already sent in Unknown on line 0"},
	{(char*) "ob_start() expects at most 3 parameters, 4 given in %s on line 17"},
	{(char*) "ob_start() expects parameter 2 to be long, string given in %s on line 23"},
	{(char*) "PDOStatement::setAttribute(): SQLSTATE[IM001]: Driver does not support this function: This driver doesn't support setting attributes in %s on line %d"},
	{(char*) "preg_match() expects at least 2 parameters, 0 given in %spreg_match_error.php on line %d"},
	{(char*) "preg_match() expects at most 5 parameters, 6 given in %spreg_match_error.php on line %d"},
	{(char*) "preg_match() expects at least 2 parameters, 1 given in %spreg_match_error.php on line %d"},
	{(char*) "preg_last_error() expects exactly 0 parameters, 1 given in %s on line %d"},
	{(char*) "preg_match_all() expects parameter 2 to be string, object given in %spreg_match_all_error2.php on line %d"},
	{(char*) "preg_match_all() expects parameter 2 to be string, array given in %spreg_match_all_error2.php on line %d"},
	{(char*) "preg_grep() expects parameter 2 to be array, string given in %spreg_grep_error2.php on line %d"},
	{(char*) "preg_grep() expects parameter 2 to be array, object given in %spreg_grep_error2.php on line %d"},
	{(char*) "Wrong parameter count for preg_replace_callback() in %s on line %d"},
	{(char*) "preg_replace_callback(): Requires argument 2, '2', to be a valid callback in %s on line %d"},
	{(char*) "preg_replace_callback(): Requires argument 2, '', to be a valid callback in %s on line 1%d"},
	{(char*) "preg_replace_callback(): Requires argument 2, 'Array', to be a valid callback in %s on line %d"},
	{(char*) "preg_quote() expects parameter 1 to be string, array given in %spreg_quote_error1.php on line %d"},
	{(char*) "preg_quote() expects parameter 1 to be string, object given in %spreg_quote_error1.php on line %d"},
	{(char*) "preg_replace_callback(): Numeric named subpatterns are not allowed in %sbug37911.php on line 14"},
	{(char*) "preg_replace(): Parameter mismatch, pattern is a string while replacement is an array in %spreg_replace2.php on line 3"},
	{(char*) "preg_replace(): Delimiter must not be alphanumeric or backslash in %spreg_replace_error1.php on line %d"},
	{(char*) "preg_replace(): No ending delimiter '/' found in %spreg_replace_error1.php on line %d"},
	{(char*) "preg_replace(): Unknown modifier '/' in %spreg_replace_error1.php on line %d"},
	{(char*) "preg_replace(): Unknown modifier 'F' in %spreg_replace_error1.php on line %d"},
	{(char*) "Wrong parameter count for preg_replace_callback() in %spreg_replace_callback_error.php on line %d"},
	{(char*) "preg_replace(): Parameter mismatch, pattern is a string while replacement is an array in %spreg_replace_error2.php on line %d"},
	{(char*) "preg_replace_callback(): Requires argument 2, '', to be a valid callback in %spreg_replace.php on line 8"},
	{(char*) "preg_replace_callback(): Modifier /e cannot be used with replacement callback in %spreg_replace.php on line 10"},
	{(char*) "preg_grep() expects at most 3 parameters, 4 given in %sgrep2.php on line 3"},
	{(char*) "preg_grep() expects parameter 2 to be array, integer given in %sgrep2.php on line 4"},
	{(char*) "preg_grep(): Compilation failed: nothing to repeat at offset 0 in %sgrep2.php on line 5"},
	{(char*) "preg_match_all(): Delimiter must not be alphanumeric or backslash in %spreg_match_all_error1.php on line %d"},
	{(char*) "preg_match_all(): No ending delimiter '/' found in %spreg_match_all_error1.php on line %d"},
	{(char*) "preg_match_all(): Unknown modifier '/' in %spreg_match_all_error1.php on line %d"},
	{(char*) "preg_match_all(): Unknown modifier 'F' in %spreg_match_all_error1.php on line %d"},
	{(char*) "preg_match_all() expects parameter 1 to be string, array given in %spreg_match_all_error1.php on line %d"},
	{(char*) "preg_match_all() expects parameter 1 to be string, object given in %spreg_match_all_error1.php on line %d"},
	{(char*) "preg_replace_callback(): Delimiter must not be alphanumeric or backslash in %s on line %d"},
	{(char*) "preg_replace_callback(): No ending delimiter '/' found in %s on line %d"},
	{(char*) "preg_replace_callback(): Unknown modifier '/' in %s on line %d"},
	{(char*) "preg_replace_callback(): Unknown modifier 'F' in %s on line %d"},
	{(char*) "preg_split() expects at least 2 parameters, 0 given in %ssplit.php on line 3"},
	{(char*) "preg_split(): Compilation failed: nothing to repeat at offset 0 in %ssplit.php on line 4"},
	{(char*) "preg_grep() expects at least 2 parameters, 0 given in %spreg_grep_error.php on line %d"},
	{(char*) "preg_grep() expects at most 3 parameters, 4 given in %spreg_grep_error.php on line %d"},
	{(char*) "preg_grep() expects at least 2 parameters, 1 given in %spreg_grep_error.php on line %d"},
	{(char*) "preg_match() expects parameter 2 to be string, array given in %spreg_match_error2.php on line %d"},
	{(char*) "preg_match() expects parameter 2 to be string, object given in %spreg_match_error2.php on line %d"},
	{(char*) "preg_match(): Compilation failed: unrecognized character follows \\ at offset 1 in %spcre_extra.php on line 4"},
	{(char*) "preg_grep(): Delimiter must not be alphanumeric or backslash in %spreg_grep_error1.php on line %d"},
	{(char*) "preg_grep(): No ending delimiter '/' found in %spreg_grep_error1.php on line %d"},
	{(char*) "preg_grep(): Unknown modifier '/' in %spreg_grep_error1.php on line %d"},
	{(char*) "preg_grep(): Unknown modifier 'F' in %spreg_grep_error1.php on line %d"},
	{(char*) "preg_grep() expects parameter 1 to be string, array given in %spreg_grep_error1.php on line %d"},
	{(char*) "preg_grep() expects parameter 1 to be string, object given in %spreg_grep_error1.php on line %d"},
	{(char*) "preg_split() expects parameter 2 to be string, array given in %spreg_split_error2.php on line %d"},
	{(char*) "preg_split() expects parameter 2 to be string, object given in %spreg_split_error2.php on line %d"},
	{(char*) "Wrong parameter count for preg_replace() in %spreg_replace_error.php on line %d"},
	{(char*) "preg_match(): Empty regular expression in %sdelimiters.php on line 3"},
	{(char*) "preg_match(): Empty regular expression in %sdelimiters.php on line 4"},
	{(char*) "preg_match(): Delimiter must not be alphanumeric or backslash in %sdelimiters.php on line 6"},
	{(char*) "preg_match(): No ending delimiter '~' found in %sdelimiters.php on line 8"},
	{(char*) "preg_match(): Unknown modifier 'z' in %sdelimiters.php on line 10"},
	{(char*) "preg_match(): No ending matching delimiter '}' found in %sdelimiters.php on line 11"},
	{(char*) "preg_match_all() expects at least 3 parameters, 0 given in %spreg_match_all_error.php on line %d"},
	{(char*) "preg_match_all() expects at most 5 parameters, 6 given in %spreg_match_all_error.php on line %d"},
	{(char*) "preg_match_all() expects at least 3 parameters, 2 given in %spreg_match_all_error.php on line %d"},
	{(char*) "preg_split() expects at least 2 parameters, 0 given in %spreg_split_error.php on line %d"},
	{(char*) "preg_split() expects at most 4 parameters, 5 given in %spreg_split_error.php on line %d"},
	{(char*) "preg_split() expects at least 2 parameters, 1 given in %spreg_split_error.php on line %d"},
	{(char*) "preg_match() expects at least 2 parameters, 0 given in %s002.php on line 3"},
	{(char*) "preg_match_all() expects at least 3 parameters, 0 given in %s002.php on line 4"},
	{(char*) "preg_match_all(): Invalid flags specified in %s002.php on line 5"},
	{(char*) "preg_quote() expects at least 1 parameter, 0 given in %s002.php on line 7"},
	{(char*) "preg_replace(): Compilation failed: missing terminating ] for character class at offset 8 in %s002.php on line 11"},
	{(char*) "preg_split(): Delimiter must not be alphanumeric or backslash in %spreg_split_error1.php on line %d"},
	{(char*) "preg_split(): No ending delimiter '/' found in %spreg_split_error1.php on line %d"},
	{(char*) "preg_split(): Unknown modifier '/' in %spreg_split_error1.php on line %d"},
	{(char*) "preg_split(): Unknown modifier 'F' in %spreg_split_error1.php on line %d"},
	{(char*) "preg_split() expects parameter 1 to be string, array given in %spreg_split_error1.php on line %d"},
	{(char*) "preg_split() expects parameter 1 to be string, object given in %spreg_split_error1.php on line %d"},
	{(char*) "preg_match(): Delimiter must not be alphanumeric or backslash in %spreg_match_error1.php on line %d"},
	{(char*) "preg_match(): No ending delimiter '/' found in %spreg_match_error1.php on line %d"},
	{(char*) "preg_match(): Unknown modifier '/' in %spreg_match_error1.php on line %d"},
	{(char*) "preg_match(): Unknown modifier 'F' in %spreg_match_error1.php on line %d"},
	{(char*) "preg_match() expects parameter 1 to be string, array given in %spreg_match_error1.php on line %d"},
	{(char*) "preg_match() expects parameter 1 to be string, object given in %spreg_match_error1.php on line %d"},
	{(char*) "preg_match(): Empty regular expression in %smatch_flags3.php on line 3"},
	{(char*) "preg_match(): Numeric named subpatterns are not allowed in %smatch_flags3.php on line 14"},
	{(char*) "preg_quote() expects at least 1 parameter, 0 given in %spreg_quote_error.php on line %d"},
	{(char*) "preg_quote() expects at most 2 parameters, 3 given in %spreg_quote_error.php on line %d"},
	{(char*) "imap_close(): supplied argument is not a valid imap resource in %s on line %d"},
	{(char*) "Wrong parameter count for imap_alerts() in %s on line %d"},
	{(char*) "Wrong parameter count for imap_fetch_overview() in %s on line %d"},
	{(char*) "imap_fetchheader(): Bad message number in %s on line %d"},
	{(char*) "imap_close(): invalid value for the flags parameter in %s on line %d"},
	{(char*) "imap_fetchbody(): Bad message number in %s on line %d"},
	{(char*) "Wrong parameter count for imap_fetchheader() in %s on line %d"},
	{(char*) "imap_fetchbody(): invalid value for the options parameter in %s on line %d"},
	{(char*) "imap_fetchbody(): supplied argument is not a valid imap resource in %s on line %d"},
	{(char*) "Wrong parameter count for imap_fetchbody() in %s on line %d"},
	{(char*) "imap_fetchheader(): invalid value for the options parameter in %s on line %d"},
	{(char*) "imap_fetch_overview(): supplied argument is not a valid imap resource in %s on line %d"},
	{(char*) "Wrong parameter count for imap_close() in %s on line %d"},
	{(char*) "imap_fetchheader(): supplied resource is not a valid imap resource in %s on line %d"},
	{(char*) "imap_fetch_overview(): invalid value for the options parameter in %s on line %d"},
	{(char*) "imap_fetch_overview(): supplied resource is not a valid imap resource in %s on line %d"},
	{(char*) "imap_fetchheader(): supplied argument is not a valid imap resource in %s on line %d"},
	{(char*) "imap_open(): Couldn't open stream %s in %s on line %d"},
	{(char*) "imap_close(): supplied resource is not a valid imap resource in %s on line %d"},
	{(char*) "tidy_get_opt_doc(): Unknown Tidy Configuration Option 'some_bogus_cfg' in %s021.php on line 3"},
	{(char*) "missing declaration"},
	{(char*) "discarding unexpected"},
	{(char*) "discarding unexpected"},
	{(char*) "inserting missing 'title' element"},
	{(char*) "tidy_repair_string(): Could not load configuration file '1' in %s on line %d"},
	{(char*) "tidy_repair_string(): Could not set encoding '1' in %s on line %d"},
	{(char*) "tidy_repair_string(): Could not load configuration file '' in %s on line %d"},
	{(char*) "tidy_repair_string() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "tidy_repair_file(): Filename cannot be empty in %s on line %d"},
	{(char*) "tidy_repair_file() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "tidy::getOpt(): Unknown Tidy Configuration Option 'bogus-opt' in %s007.php on line 10"},
	{(char*) "main(): Couldn't fetch mysqli_result in %s on line %d"},
	{(char*) "Wrong parameter count for bzcompress() in %s on line %d"},
	{(char*) "bzdecompress() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "bzdecompress() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "bzread() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "bzread() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "bzread(): length may not be negative in %s on line %d"},
	{(char*) "bzopen(): cannot read from a stream opened in write only mode in %s on line %d"},
	{(char*) "fopen(bz_open_002.txt): failed to open stream: Bad file %s in %s on line %d"},
	{(char*) "bzopen(): filename cannot be empty in %s on line %d"},
	{(char*) "bzopen(): cannot write to a stream opened in read only mode in %s on line %d"},
	{(char*) "bzopen(): cannot use stream opened in mode 'rw' in %s on line %d"},
	{(char*) "bzopen(): cannot use stream opened in mode 'wr' in %s on line %d"},
	{(char*) "bzopen(): cannot use stream opened in mode 'r+' in %s on line %d"},
	{(char*) "bzopen(): cannot use stream opened in mode 'w+' in %s on line %d"},
	{(char*) "bzread(): %d is not a valid stream resource in %s on line %d"},
	{(char*) "bzerror(): %d is not a valid stream resource in %s on line %d"},
	{(char*) "bzerrstr(): %d is not a valid stream resource in %s on line %d"},
	{(char*) "bzerrno(): %d is not a valid stream resource in %s on line %d"},
	{(char*) "Wrong parameter count for bzopen() in %s on line %d"},
	{(char*) "bzopen(): '' is not a valid mode for bzopen(). Only 'w' and 'r' are supported. in %s on line %d"},
	{(char*) "bzopen(): 'x' is not a valid mode for bzopen(). Only 'w' and 'r' are supported. in %s on line %d"},
	{(char*) "bzopen(): 'rw' is not a valid mode for bzopen(). Only 'w' and 'r' are supported. in %s on line %d"},
	{(char*) "bzopen(no_such_file): failed to open stream: No such file or directory in %s on line %d"},
	{(char*) "PDO::setAttribute(): SQLSTATE[HY000]: General error: PDO::ATTR_STATEMENT_CLASS requires format array(classname, array(ctor_args)); the classname must be a string specifying an existing class in %s on line %d"},
	{(char*) "PDO::setAttribute(): SQLSTATE[HY000]: General error: attribute value must be an integer in %s on line %d"},
	{(char*) "PDOStatement::fetch(): SQLSTATE[HY000]: General error: PDO::FETCH_KEY_PAIR fetch mode requires the result set to contain extactly 2 columns. in %s/pdo_034.php on line %d"},
	{(char*) "PDOStatement::fetch(): SQLSTATE[HY000]: General error%s/pdo_034.php on line %d"},
	{(char*) "PDOStatement::execute(): SQLSTATE[HY093]: Invalid parameter number: parameter was not defined in %s on line %d"},
	{(char*) "PDOStatement::execute(): SQLSTATE[HY093]: Invalid parameter number in %s on line %d"},
	{(char*) "PDOStatement::fetchAll(): SQLSTATE[HY000]: General error: No fetch class specified in %s on line %d"},
	{(char*) "PDOStatement::fetchAll(): SQLSTATE[HY000]: General error%s on line %d"},
	{(char*) "PDOStatement::fetchAll(): SQLSTATE[HY000]: General error: No fetch function specified in %s on line %d"},
	{(char*) "msg_receive(): message corrupted in %s002.php on line %d"},
	{(char*) "Wrong parameter count for shm_remove_var() in %s on line %d"},
	{(char*) "shm_remove_var(): -1 is not a SysV shared memory index in %s on line %d"},
	{(char*) "shm_remove_var(): variable key -10 doesn't exist in %s on line %d"},
	{(char*) "shm_get_var(): variable key 1 doesn't exist in %s on line %d"},
	{(char*) "shm_remove_var(): variable key 1 doesn't exist in %s on line %d"},
	{(char*) "Wrong parameter count for shm_get_var() in %s on line %d"},
	{(char*) "shm_get_var(): -1 is not a SysV shared memory index in %s on line %d"},
	{(char*) "shm_get_var(): variable key 1000 doesn't exist in %s on line %d"},
	{(char*) "shm_get_var(): variable key -10000 doesn't exist in %s on line %d"},
	{(char*) "Wrong parameter count for shm_detach() in %s on line %d"},
	{(char*) "shm_detach(): The parameter is not a valid shm_identifier in %s on line %d"},
	{(char*) "shm_remove(): The parameter is not a valid shm_identifier in %s on line %d"},
	{(char*) "Wrong parameter count for shm_remove() in %s on line %d"},
	{(char*) "Wrong parameter count for shm_attach() in %s/sysvshm/tests/002.php on line %d"},
	{(char*) "shm_attach(): Segment size must be greater then zero. in %s/sysvshm/tests/002.php on line %d"},
	{(char*) "shm_remove(): The parameter is not a valid shm_identifier in %s/sysvshm/tests/002.php on line %d"},
	{(char*) "Wrong parameter count for shm_put_var() in %s on line %d"},
	{(char*) "shm_put_var(): -1 is not a SysV shared memory index in %s on line %d"},
	{(char*) "shm_put_var(): not enough shared memory left in %s on line %d"},
	{(char*) "Wrong parameter count for ftok() in %s on line %d"},
	{(char*) "ftok(): Pathname is invalid in %s on line %d"},
	{(char*) "ftok(): Project identifier is invalid in %s on line %d"},
	{(char*) "ftok(): ftok() failed - No such file or directory in %s on line %d"},
	{(char*) "session_set_save_handler(): Argument 1 is not a valid callback in %sbug31454.php on line %d"},
	{(char*) "session_set_save_handler(): Argument 2 is not a valid callback in %s on line %d"},
	{(char*) "session_set_save_handler(): Argument 3 is not a valid callback in %s on line %d"},
	{(char*) "session_set_save_handler(): Argument 4 is not a valid callback in %s on line %d"},
	{(char*) "session_set_save_handler(): Argument 5 is not a valid callback in %s on line %d"},
	{(char*) "session_set_save_handler(): Argument 6 is not a valid callback in %s on line %d"},
	{(char*) "ini_set(): open_basedir restriction in effect. File(%s) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "session_start(): open_basedir restriction in effect. File(%s) is not within the allowed path(s): (.) in %s on line %d"},
	{(char*) "session_encode(): Cannot encode non-existent session. in %s on line %d"},
	{(char*) "session_destroy(): Trying to destroy uninitialized session in %s on line %d"},
	{(char*) "Wrong parameter count for session_destroy() in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module () in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (blah) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (foo) in %s on line %d"},
	{(char*) "session_start(): open(%s, O_RDWR) failed: No such file or directory (2) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (0) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (1) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (12345) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (-2345) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (10.5) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (-10.5) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (123456789000) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (1.23456789E-9) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (0.5) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (Nothing) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (Hello World!) in %s on line %d"},
	{(char*) "session_module_name(): Cannot find named PHP session module (Resource id #%d) in %s on line %d"},
	{(char*) "Wrong parameter count for session_encode() in %s on line %d"},
	{(char*) "session_start(): Unknown session.serialize_handler. Failed to decode session object. in %s on line %d"},
	{(char*) "session_encode(): Unknown session.serialize_handler. Failed to encode session object. in %s on line %d"},
	{(char*) "unlink(%s): No such file or directory in %s on line %d"},
	{(char*) "session_regenerate_id() expects parameter 1 to be boolean, object given in %s on line %d"},
	{(char*) "session_regenerate_id() expects parameter 1 to be boolean, resource given in %s on line %d"},
	{(char*) "session_set_save_handler(): Argument 1 is not a valid callback in %s on line %d"},
	{(char*) "session_decode(): Unknown session.serialize_handler. Failed to decode session object. in %s on line %d"},
	{(char*) "ini_set(): A session is active. You cannot change the session module's ini settings at this time. in %s on line %d"},
	{(char*) "Wrong parameter count for session_get_cookie_params() in %s on line %d"},
	{(char*) "XSLTProcessor::transformToXml(): A PHP Object can not be converted to a XPath-string in %s on line 16"},
	{(char*) "dba_popen(%stest0.dbm,r-): Locking cannot be disabled for handler qdbm in %sdba_handler.inc on line %d"},
	{(char*) "class_implements(): Class non-existent does not exist and could not be loaded in %s on line %d"},
	{(char*) "class_implements(): Class non-existent2 does not exist in %s on line %d"},
	{(char*) "CachingIterator::offsetExists() expects exactly 1 parameter, 0 given in %siterator_044.php on line %d"},
	{(char*) "CachingIterator::offsetGet() expects exactly 1 parameter, 0 given in %siterator_044.php on line %d"},
	{(char*) "CachingIterator::offsetExists() expects parameter 1 to be string, object given in %siterator_044.php on line %d"},
	{(char*) "CachingIterator::offsetGet() expects parameter 1 to be string, object given in %siterator_044.php on line %d"},
	{(char*) "class_parents(): Class foo does not exist in %sspl_003.php on line %d"},
	{(char*) "class_parents(): Class foo does not exist and could not be loaded in %sspl_003.php on line %d"},
	{(char*) "class_implements(): Class aaa does not exist and could not be loaded in %sspl_003.php on line %d"},
	{(char*) "class_implements(): Class bbb does not exist in %sspl_003.php on line %d"},
	{(char*) "Invalid argument supplied for foreach() in %ssxe_003.php on line %d"},
	{(char*) "spl_object_hash() expects parameter 1 to be object, integer given in %sspl_005.php on line %d"},
	{(char*) "spl_object_hash() expects exactly 1 parameter, 0 given in %sspl_005.php on line %d"},
	{(char*) "class_implements() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "class_implements() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "CachingIterator::offsetSet() expects exactly 2 parameters, 0 given in %siterator_045.php on line %d"},
	{(char*) "CachingIterator::offsetSet() expects exactly 2 parameters, 1 given in %siterator_045.php on line %d"},
	{(char*) "CachingIterator::offsetUnset() expects exactly 1 parameter, 0 given in %siterator_045.php on line %d"},
	{(char*) "ArrayObject::setIteratorClass() expects parameter 1 to be a class name derived from Iterator, 'nonExistentClass' given in %s on line 4"},
	{(char*) "ArrayObject::setIteratorClass() expects parameter 1 to be a class name derived from Iterator, 'stdClass' given in %s on line 14"},
	{(char*) "ArrayObject::exchangeArray() expects exactly 1 parameter, 0 given in %s on line 27"},
	{(char*) "token_get_all() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "token_get_all() expects parameter 1 to be string, object given in %s on line %d"},
	{(char*) "token_get_all() expects exactly 1 parameter, 0 given in %s on line %d"},
	{(char*) "token_get_all() expects exactly 1 parameter, 2 given in %s on line %d"},
	{(char*) "token_get_all() expects parameter 1 to be string, resource given in %s on line %d"},
	{(char*) "token_name() expects parameter 1 to be long, string given in %s on line %d"},
	{(char*) "token_name() expects parameter 1 to be long, array given in %s on line %d"},
	{(char*) "Wrong parameter count for mcrypt_encrypt() in %s on line %d"},
	{(char*) "mcrypt_encrypt(): Size of key is too large for this algorithm in %s on line %d"},
	{(char*) "mcrypt_decrypt(): Size of key is too large for this algorithm in %s on line %d"},
	{(char*) "mcrypt_module_open(): Could not open encryption module in %s on line %d"},
	{(char*) "mcrypt_cbc(): Size of key is too large for this algorithm in %s on line %d"},
	{(char*) "mcrypt_cbc(): The IV parameter must be as long as the blocksize in %s on line %d"},
	{(char*) "mcrypt_get_iv_size(): Module initialization failed in %s on line %d"},
	{(char*) "Wrong parameter count for mcrypt_decrypt() in %s on line %d"},
	{(char*) "mcrypt_cbc(): Attempt to use an empty IV, which is NOT recommend in %s on line %d"},
	{(char*) "mcrypt_encrypt(): The IV parameter must be as long as the blocksize in %s on line %d"},
	{(char*) "mcrypt_decrypt(): The IV parameter must be as long as the blocksize in %s on line %d"},
	{(char*) "mcrypt_ecb(): Size of key is too large for this algorithm in %s on line %d"},
	{(char*) "Wrong parameter count for mcrypt_cbc() in %s on line %d"},
	{(char*) "mcrypt_cfb(): Attempt to use an empty IV, which is NOT recommend in %s on line %d"},
	{(char*) "mcrypt_decrypt(): Attempt to use an empty IV, which is NOT recommend in %s on line %d"},
	{(char*) "mcrypt_generic(): Operation disallowed prior to mcrypt_generic_init(). in %sbug41252.php on line 3"},
	{(char*) "mcrypt_generic(): Operation disallowed prior to mcrypt_generic_init(). in %sbug35496.php on line 3"},
	{(char*) "mdecrypt_generic(): Operation disallowed prior to mcrypt_generic_init(). in %sbug35496.php on line 4"},
	{(char*) "Wrong parameter count for mcrypt_ecb() in %s on line %d"},
	{(char*) "XMLReader::read(): Element 'foo': %s"},
	{(char*) "XMLReader::setRelaxNGSchema(): Schema data source is required in %s on line %d"},
	{(char*) "XMLReader::open(): Empty string supplied as input in %s on line %d"},
	{(char*) "XMLReader::XML(): Empty string supplied as input in %s on line %d"},
	{(char*) "ZipArchive::getCommentName() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "ZipArchive::open(): Empty string as source in %s on line %d"},
	{(char*) "Wrong parameter count for array_filter() in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'even', should be a valid callback in %s on line %d"},
	{(char*) "array_walk() expects at most 3 parameters, 4 given in %s on line %d"},
	{(char*) "array_map(): The first argument, '', should be either NULL or a valid callback in %s line %d"},
	{(char*) "array_map(): The first argument, 'Array', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_rand(): First argument has to be an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_reduce() in %s on line %d"},
	{(char*) "min(): At least one value should be passed in %s on line %d"},
	{(char*) "Wrong parameter count for min() in %s on line %d"},
	{(char*) "min(): Array must contain at least one element in %s on line %d"},
	{(char*) "arsort() expects at least 1 parameter, 0 given in %sarsort_error.php on line %d"},
	{(char*) "arsort() expects at most 2 parameters, 3 given in %sarsort_error.php on line %d"},
	{(char*) "Wrong parameter count for array_shift() in %s on line %d"},
	{(char*) "array_udiff(): Argument #2 is not an array in %sarray_udiff_variation2.php on line %d"},
	{(char*) "sort() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "sort() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "sort() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "sort() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "sort() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "sort() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "sort() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "krsort() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "krsort() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "krsort() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for array_multisort() in %sarray_multisort_error.php on line %d"},
	{(char*) "array_multisort(): Argument #3 is expected to be an array or sorting flag that has not already been specified in %sarray_multisort_error.php on line %d"},
	{(char*) "array_walk_recursive() expects at least 2 parameters, 0 given in %s on line %d"},
	{(char*) "array_walk_recursive() expects at least 2 parameters, 1 given in %s on line %d"},
	{(char*) "array_walk_recursive(): Unable to call non_existent() - function does not exist in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_udiff_assoc() in %s on line %d"},
	{(char*) "shuffle() expects exactly 1 parameter, 0 given in %s on line %d"},
	{(char*) "shuffle() expects exactly 1 parameter, 2 given in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_uintersect_assoc() in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_uintersect_uassoc() in %s on line %d"},
	{(char*) "array_diff_key(): Argument #3 is not an array in %s on line %d"},
	{(char*) "array_fill(): Number of elements must be positive in %s on line %d"},
	{(char*) "krsort() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "krsort() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "Wrong parameter count for array_pad() in %s on line %d"},
	{(char*) "array_intersect(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_intersect_ukey(): Argument #3 is not an array in %s on line %d"},
	{(char*) "array_unshift(): The first argument should be an array in %s on line %d"},
	{(char*) "Missing argument 3 for callback1() in %s on line %d"},
	{(char*) "Missing argument 4 for callback2() in %s on line %d"},
	{(char*) "array_walk_recursive() expects at most 3 parameters, 4 given in %s on line %d"},
	{(char*) "Wrong parameter count for end() in %s on line %d"},
	{(char*) "end(): Passed variable is not an array or object in %s on line %d"},
	{(char*) "Missing argument 3 for too_many_parameters() in %sarray_uintersect_uassoc_variation6.php on line %d"},
	{(char*) "array_map(): The first argument, 'non-existent::square', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'SimpleClass::non-existent', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback unknown_function in %s on line %d"},
	{(char*) "Wrong parameter count for array_key_exists() in %s on line %d"},
	{(char*) "array_product(): The argument should be an array in %s on line %d"},
	{(char*) "Missing argument 2 for callback2() in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Argument #2 is not an array in %sarray_uintersect_assoc_variation2.php on line %d"},
	{(char*) "array_diff(): Argument #1 is not an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_diff() in %s on line %d"},
	{(char*) "array_intersect(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_key_exists(): The first argument should be either a string or an integer in %s on line %d"},
	{(char*) "array_key_exists(): The second argument should be either an array or an object in %s on line %d"},
	{(char*) "array_combine(): Both parameters should have at least 1 element in %s on line %d"},
	{(char*) "array_diff_ukey(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_flip(): Can only flip STRING and INTEGER values! in %s on line %d"},
	{(char*) "Wrong parameter count for array_search() in %s on line %d"},
	{(char*) "array_search(): Wrong datatype for second argument in %s on line %d"},
	{(char*) "array_fill(): Wrong data type for start key in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Argument #1 is not an array in %sarray_uintersect_assoc_variation1.php on line %d"},
	{(char*) "Wrong parameter count for array_count_values() in %sarray_count_values_error.php on line 16"},
	{(char*) "Wrong parameter count for array_count_values() in %sarray_count_values_error.php on line 22"},
	{(char*) "array_count_values(): The argument should be an array in %sarray_count_values_error.php on line 26"},
	{(char*) "array_uintersect(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback -2345 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback string in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Argument #2 is not an array in %sarray_udiff_uassoc_variation2.php on line %d"},
	{(char*) "array_merge(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback -12345 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback string in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_diff_uassoc(): Not a valid callback Resource id #5 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback unknown_function in %s on line %d"},
	{(char*) "Wrong parameter count for uasort() in %s on line %d"},
	{(char*) "uasort(): Invalid comparison function in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'Array', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The first argument should be an array in %s on line %d"},
	{(char*) "array_filter(): The second argument, '1', should be a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '0', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '1', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '12345', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '-2345', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '10.5', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '-10.5', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '123456789000', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '1.23456789E-9', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '0.5', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, '', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'Class A object', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'Resource id #%d', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_udiff(): Argument #3 is not an array in %sarray_udiff_variation4.php on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_udiff_uassoc() in %s on line %d"},
	{(char*) "key(): Passed variable is not an array or object in %s on line %d"},
	{(char*) "array_fill_keys() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "Wrong parameter count for compact() in %s on line %d"},
	{(char*) "array_change_key_case(): The argument should be an array in %s on line %d"},
	{(char*) "array_intersect_key(): Argument #1 is not an array in %s on line %d"},
	{(char*) "Missing argument 2 for __lambda_func() in %s(20) : runtime-created function on line %d"},
	{(char*) "array_map(): Argument #2 should be an array in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "array_combine() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "array_slice() expects parameter 4 to be boolean, array given in %s on line %d"},
	{(char*) "array_slice() expects parameter 4 to be boolean, object given in %s on line %d"},
	{(char*) "current(): Passed variable is not an array or object in %s on line %d"},
	{(char*) "array_diff_uassoc(): Argument #3 is not an array in %s on line %d"},
	{(char*) "array_intersect_key(): Argument #2 is not an array in %s on line %d"},
	{(char*) "next(): Passed variable is not an array or object in %s on line %d"},
	{(char*) "asort() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "asort() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "asort() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "ksort() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "array_chunk() expects at least 2 parameters, 0 given in %s on line %d"},
	{(char*) "array_chunk() expects at most 3 parameters, 4 given in %s on line %d"},
	{(char*) "array_chunk() expects at least 2 parameters, 1 given in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Argument #2 is not an array in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "asort() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "array_filter(): The second argument, '0', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '1', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '12345', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '-2345', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '10.5', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '-10.5', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '123456789000', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '1.23456789E-9', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '0.5', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'Array', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, '', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'string', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'object', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, %s, should be a valid callback in %s on line %d"},
	{(char*) "array_merge_recursive(): recursion detected in %s on line 18"},
	{(char*) "array_fill_keys() expects exactly 2 parameters, 3 given in %sarray_fill_keys_error.php on line %d"},
	{(char*) "array_fill_keys() expects exactly 2 parameters, 1 given in %sarray_fill_keys_error.php on line %d"},
	{(char*) "array_fill_keys() expects exactly 2 parameters, 0 given in %sarray_fill_keys_error.php on line %d"},
	{(char*) "array_diff(): Argument #2 is not an array in %s"},
	{(char*) "Wrong parameter count for array_splice() in %s on line %d"},
	{(char*) "array_uintersect(): Argument #2 is not an array in %sarray_uintersect_variation2.php on line %d"},
	{(char*) "array_map(): The first argument, 'non_existent', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_combine() expects exactly 2 parameters, 0 given in %s on line %d"},
	{(char*) "array_combine() expects exactly 2 parameters, 3 given in %s on line %d"},
	{(char*) "array_combine() expects exactly 2 parameters, 1 given in %s on line %d"},
	{(char*) "prev(): Passed variable is not an array or object in %s on line %d"},
	{(char*) "array_uintersect(): Argument #3 is not an array in %sarray_uintersect_variation4.php on line %d"},
	{(char*) "usort(): Invalid comparison function in %s on line %d"},
	{(char*) "Wrong parameter count for usort() in %s on line %d"},
	{(char*) "array_map(): An error occurred while invoking the map callback in %s on line %d"},
	{(char*) "array_diff_ukey(): Argument #3 is not an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_values() in %s on line %d"},
	{(char*) "array_intersect_ukey(): Argument #1 is not an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_shift() in %s line %d"},
	{(char*) "array_shift(): The argument should be an array in %s on line %d"},
	{(char*) "uksort(): The argument should be an array in %s on line %d"},
	{(char*) "uksort(): Invalid comparison function in %s on line %d"},
	{(char*) "Wrong parameter count for array_rand() in %s on line %d"},
	{(char*) "Wrong parameter count for array_merge_recursive() in %s on line %d"},
	{(char*) "in_array(): Wrong datatype for second argument in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Argument #1 is not an array in %sarray_uintersect_uassoc_variation1.php on line %d"},
	{(char*) "sizeof() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "sizeof() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "asort() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "asort() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "Wrong parameter count for in_array() in %s on line %d"},
	{(char*) "array_udiff_assoc(): Argument #2 is not an array in %sarray_udiff_assoc_variation2.php on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, integer given in %s on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, double given in %s on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, null given in %s on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, boolean given in %s on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, string given in %s on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, object given in %s on line %d"},
	{(char*) "array_combine() expects parameter 2 to be array, resource given in %s on line %d"},
	{(char*) "range(): step exceeds the specified range in %s on line %d"},
	{(char*) "range() expects at least 2 parameters, 0 given in %s on line %d"},
	{(char*) "range() expects at least 2 parameters, 1 given in %s on line %d"},
	{(char*) "range() expects at most 3 parameters, 4 given in %s on line %d"},
	{(char*) "Wrong parameter count for array_intersect_key() in %s on line %d"},
	{(char*) "array_intersect_key(): Argument #3 is not an array in %s on line %d"},
	{(char*) "Wrong parameter count for current() in %s on line %d"},
	{(char*) "array_unique() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "array_unique() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "Wrong parameter count for array_diff_uassoc() in %s on line %d"},
	{(char*) "array_merge_recursive(): recursion detected in %sbug43495.php on line %d"},
	{(char*) "Wrong parameter count for array_product() in %sarray_product_error.php on line %d"},
	{(char*) "array_product(): The argument should be an array in %sarray_product_error.php on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback -12345 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback Resource id #5 in %s on line %d"},
	{(char*) "array_chunk() expects parameter 3 to be boolean, object given in %s on line %d"},
	{(char*) "array_walk(): Wrong syntax for function name in %s on line %d"},
	{(char*) "array_walk(): Unable to call () - function does not exist in %s on line %d"},
	{(char*) "array_uintersect(): Argument #1 is not an array in %sarray_uintersect_variation1.php on line %d"},
	{(char*) "array_walk() expects at least 2 parameters, 0 given in %s on line %d"},
	{(char*) "array_walk() expects at least 2 parameters, 1 given in %s on line %d"},
	{(char*) "array_walk(): Unable to call non_existent() - function does not exist in %s on line %d"},
	{(char*) "array_keys(): The first argument should be an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_keys() in %s on line %d"},
	{(char*) "uasort(): The argument should be an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_diff_assoc() in %s on line %d"},
	{(char*) "Missing argument 3 for threeArgs() in %sarray_reduce_variation1.php on line %d"},
	{(char*) "sort() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "sort() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "sort() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for array_diff_key() in %s on line %d"},
	{(char*) "array_pad(): You may only pad up to 1048576 elements at a time in %s on line %d"},
	{(char*) "sizeof() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "sizeof() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "sizeof() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "array_walk_recursive(): The argument should be an array in %s on line %d"},
	{(char*) "Missing argument 3 for too_many_parameters() in %sarray_udiff_uassoc_variation6.php on line %d"},
	{(char*) "array_unique(): The argument should be an array in %s on line %d"},
	{(char*) "array_slice() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "array_slice() expects parameter 2 to be long, array given in %s on line %d"},
	{(char*) "array_map(): The first argument, 'SimpleClassPri::add', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'SimpleClassPro::mul', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'StaticClass::cube', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'StaticClass::retVal', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "rsort() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "rsort() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "rsort() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for prev() in %s on line %d"},
	{(char*) "count(): recursion detected in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'echo', should be a valid callback in %s on line %d"},
	{(char*) "array_filter(): The second argument, 'exit', should be a valid callback in %s on line %d"},
	{(char*) "count() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "count() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "sort() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "sort() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "array_splice(): The first argument should be an array in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback -12345 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback Resource id #5 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Argument #2 is not an array in %sarray_uintersect_uassoc_variation2.php on line %d"},
	{(char*) "array_chunk() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "Wrong parameter count for array_intersect_assoc() in %s on line %d"},
	{(char*) "Wrong parameter count for array_push() in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback -2345 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback string in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_diff_uassoc(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_merge_recursive(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_rand(): Second argument has to be between 1 and the number of elements in the array in %s on line %d"},
	{(char*) "array_walk(): The argument should be an array in %s on line %d"},
	{(char*) "array_diff(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_intersect_ukey() in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Argument #3 is not an array in %sarray_udiff_uassoc_variation5.php on line %d"},
	{(char*) "Wrong parameter count for next() in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "shuffle() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "array_intersect_ukey(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_values(): The argument should be an array in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback -2345 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback string in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_udiff(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_udiff() in %s on line %d"},
	{(char*) "array_chunk(): Size parameter expected to be greater than 0 in %s on line %d"},
	{(char*) "ksort() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "ksort() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "ksort() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "array_diff_uassoc(): Argument #2 is not an array in %s on line %d"},
	{(char*) "Missing argument 3 for too_many_parameters() in %sarray_uintersect_assoc_variation5.php on line %d"},
	{(char*) "ksort() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "ksort() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "Wrong parameter count for extract() in %s on line %d"},
	{(char*) "extract(): Unknown extract type in %s on line %d"},
	{(char*) "extract(): First argument should be an array in %s on line %d"},
	{(char*) "extract(): Prefix expected to be specified in %s on line %d"},
	{(char*) "array_chunk(): Size parameter expected to be greater than 0 in %s on line %d"},
	{(char*) "array_chunk() expects parameter 2 to be long, array given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "array_chunk() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "krsort() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "arsort() expects parameter 2 to be long, string given in %sarsort_variation2.php on line %d"},
	{(char*) "arsort() expects parameter 2 to be long, object given in %sarsort_variation2.php on line %d"},
	{(char*) "arsort() expects parameter 2 to be long, resource given in %sarsort_variation2.php on line %d"},
	{(char*) "usort(): The argument should be an array in %s on line %d"},
	{(char*) "array_diff_key(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_reduce(): The second argument, 'bogusbogus', should be a valid callback in %s on line %d"},
	{(char*) "array_reduce(): The first argument should be an array in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Argument #3 is not an array in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback -2345 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback string in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_merge_recursive(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_diff_ukey(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_diff_ukey() in %s on line %d"},
	{(char*) "array_diff_assoc(): Argument #2 is not an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_map() in %s on line %d"},
	{(char*) "array_fill(): Number of elements must be positive in %s on line %d"},
	{(char*) "pow() expects exactly 2 parameters, 1 given in %s on line %d"},
	{(char*) "array_map(): The first argument, 'echo', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_diff_key(): Argument #2 is not an array in %s on line %d"},
	{(char*) "min(): At least one %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback -2345 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback string in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_udiff_assoc(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_push(): First argument should be an array in %s on line %d"},
	{(char*) "array_map(): The first argument, 'ParentClass::staticChild', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, integer given in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, double given in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, null given in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, boolean given in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, string given in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, object given in %s on line %d"},
	{(char*) "rsort() expects parameter 1 to be array, resource given in %s on line %d"},
	{(char*) "Missing argument 3 for too_many_parameters() in %sarray_uintersect_variation5.php on line %d"},
	{(char*) "Wrong parameter count for array_unshift() in %s on line %d"},
	{(char*) "array_slice() expects at most 4 parameters, 5 given in %s on line %d"},
	{(char*) "array_slice() expects at least 2 parameters, 1 given in %s on line %d"},
	{(char*) "rsort() expects at least 1 parameter, 0 given in %s on line %d"},
	{(char*) "rsort() expects at most 2 parameters, 3 given in %s on line %d"},
	{(char*) "array_udiff_uassoc(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_udiff_assoc(): Argument #1 is not an array in %sarray_udiff_assoc_variation1.php on line %d"},
	{(char*) "array_uintersect_assoc(): Argument #3 is not an array in %sarray_uintersect_assoc_variation4.php on line %d"},
	{(char*) "Wrong parameter count for array_flip() in %s on line %d"},
	{(char*) "array_intersect_assoc(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback -2345 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback string in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback sTrInG in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback hello world in %s on line %d"},
	{(char*) "array_uintersect_assoc(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_walk(): Unable to call echo() - function does not exist in %s on line %d"},
	{(char*) "reset(): Passed variable is not an array or object in %s on line %s"},
	{(char*) "Wrong parameter count for array_reverse() in %s on line %d"},
	{(char*) "array_pad(): The argument should be an array in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 0 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 1 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 12345 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback -12345 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 10.5 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback -10.5 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 123456789000 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback -123456789000 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback 0.5 in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback Class A object in %s on line %d"},
	{(char*) "array_intersect_ukey(): Not a valid callback Resource id #5 in %s on line %d"},
	{(char*) "array_uintersect_uassoc(): Argument #3 is not an array in %sarray_uintersect_uassoc_variation5.php on line %d"},
	{(char*) "array_diff_ukey(): Argument #1 is not an array in %s on line %d"},
	{(char*) "Wrong parameter count for uksort() in %s on line %d"},
	{(char*) "Wrong parameter count for reset() in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Argument #1 is not an array in %s on line %d"},
	{(char*) "natcasesort(): The argument should be an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_merge() in %s on line %d"},
	{(char*) "array_uintersect(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_uintersect() in %s on line %d"},
	{(char*) "array_reverse(): The argument should be an array in %s on line %d"},
	{(char*) "array_intersect_assoc(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_sum(): The argument should be an array in %s on line %d"},
	{(char*) "Wrong parameter count for key() in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback 10 in %s on line %d"},
	{(char*) "Wrong parameter count for array_intersect_uassoc() in %s on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback Array in %s on line %d"},
	{(char*) "array_diff_assoc(): Argument #1 is not an array in %s on line %d"},
	{(char*) "array_udiff(): Argument #1 is not an array in %sarray_udiff_variation1.php on line %d"},
	{(char*) "array_filter(): The first argument should be an array in %s on line %d"},
	{(char*) "Wrong parameter count for array_fill() in %s on line %d"},
	{(char*) "array_flip(): The argument should be an array in %s on line %d"},
	{(char*) "max(): At least one value should be passed in %s on line %d"},
	{(char*) "Wrong parameter count for max() in %s on line %d"},
	{(char*) "max(): Array must contain at least one element in %s on line %d"},
	{(char*) "Missing argument 3 for too_many_parameters() in %sarray_udiff_assoc_variation5.php on line %d"},
	{(char*) "Missing argument 3 for too_many_parameters() in %sarray_udiff_variation5.php on line %d"},
	{(char*) "Wrong parameter count for array_sum() in %s on line %d"},
	{(char*) "array_walk_recursive(): Wrong syntax for function name in %s on line %d"},
	{(char*) "array_walk_recursive(): Unable to call Array() - function does not exist in %s on line %d"},
	{(char*) "array_walk_recursive(): Unable to call () - function does not exist in %s on line %d"},
	{(char*) "array_count_values(): Can only count STRING and INTEGER values! in %s on line %s"},
	{(char*) "Wrong parameter count for natcasesort() in %s on line %d"},
	{(char*) "max(): At least one %s on line %d"},
	{(char*) "count() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "count() expects parameter 2 to be long, object given in %s on line %d"},
	{(char*) "count() expects parameter 2 to be long, resource given in %s on line %d"},
	{(char*) "array_walk_recursive(): Unable to call echo() - function does not exist in %s on line %d"},
	{(char*) "array_product(): The argument should be an array in %sarray_product_variation5.php on line %d"},
	{(char*) "array_merge(): Argument #2 is not an array in %s on line %d"},
	{(char*) "array_push(): Cannot add element to the array as the next element is already occupied in %s on line %d"},
	{(char*) "Wrong parameter count for array_intersect() in %s on line %d"},
	{(char*) "array_map(): The first argument, 'array', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'empty', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'eval', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'exit', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'isset', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'list', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_map(): The first argument, 'print', should be either NULL or a valid callback in %s on line %d"},
	{(char*) "array_combine(): Both parameters should have an equal number of elements in %s on line %d"},
	{(char*) "array_udiff_assoc(): Argument #3 is not an array in %sarray_udiff_assoc_variation4.php on line %d"},
	{(char*) "array_intersect_uassoc(): Not a valid callback unknown_function in %s on line %d"},
	{(char*) "array_fill_keys() expects parameter 1 to be array, boolean given in %sarray_fill_keys_variation3.php on line %d"},
	{(char*) "array_fill_keys() expects parameter 1 to be array, null given in %sarray_fill_keys_variation3.php on line %d"},
	{(char*) "Wrong parameter count for array_pop() in %s on line %d"},
	{(char*) "array_pop(): The argument should be an array in %s on line %d"},
	{(char*) "array_flip(): Can only flip STRING and INTEGER values! in %s on line %d"},
	{(char*) "Wrong parameter count for array_flip() in %s on line %d"},
	{(char*) "Wrong parameter count for array_change_key_case() in %s on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, integer given in %sarsort_variation1.php on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, double given in %sarsort_variation1.php on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, null given in %sarsort_variation1.php on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, boolean given in %sarsort_variation1.php on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, string given in %sarsort_variation1.php on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, object given in %sarsort_variation1.php on line %d"},
	{(char*) "arsort() expects parameter 1 to be array, resource given in %sarsort_variation1.php on line %d"},
	{(char*) "openlog() expects exactly 3 parameters, 0 given in %s on line %d"},
	{(char*) "openlog() expects parameter 2 to be long, string given in %s on line %d"},
	{(char*) "syslog() expects exactly 2 parameters, 0 given in %s on line %d"},
	{(char*) "syslog() expects parameter 1 to be long, string given in %s on line %d"},
	{(char*) "Wrong parameter count for closelog() in %s on line %d"},
	{(char*) "ezmlm_hash() expects exactly 1 parameter, 0 given in %s on line %d"},
	{(char*) "ezmlm_hash() expects exactly 1 parameter, 2 given in %s on line %d"},
	{(char*) "ezmlm_hash() expects parameter 1 to be string, array given in %s on line %d"},
	{(char*) "ezmlm_hash() expects parameter 1 to be string, object given in %s on line %d"},
	{(char*) "ezmlm_hash() expects parameter 1 to be string, resource given in %s on line %d"},
	{(char*) "mail() expects at most 5 parameters, 6 given in %s on line %d"},
	{(char*) "mail() expects at least 3 parameters, 2 given in %s on line %d"},
	{(char*) "mail(): Failed to connect to mailserver at \"localplace\" port 25, verify your \"SMTP\" and \"smtp_port\" setting in php.ini or use ini_set() in %s on line %d"},
	{(char*) "explode(): Empty delimiter in %s on line %d"},
	{(char*) "mail(): \"sendmail_from\" not set in php.ini or custom \"From:\" header missing in %s on line %d"},
	{(char*) "mail(): Failed to connect to mailserver at \"localhost\" port 2525, verify your \"SMTP\" and \"smtp_port\" setting in php.ini or use ini_set() in %s on line %d"},
	{(char*) "Wrong parameter count for getrandmax() in %s on line 2"},
	{(char*) "mt_rand() expects exactly 2 parameters, 1 given in %s on line 2"},
	{(char*) "mt_rand() expects exactly 2 parameters, 3 given in %s on line 3"},
	{(char*) "mt_rand() expects parameter 1 to be long, string given in %s on line 4"},
	{(char*) "mt_rand() expects parameter 2 to be long, string given in %s on line 5"},
	{(char*) "rand() expects parameter 1 to be long, string given in %s on line %d"},
	{(char*) "rand() expects parameter 1 to be long, array given in %s on line %d"},
	{(char*) "rand() expects parameter 1 to be long, object given in %s on line %d"},
	{(char*) "rand() expects parameter 1 to be long, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for decbin() in %s on line %d"},
	{(char*) "Wrong parameter count for ceil() in %s on line %d"},
	{(char*) "Wrong parameter count for hexdec() in %s on line %d"},
	{(char*) "exp() expects parameter 1 to be double, string given in %s on line %d"},
	{(char*) "exp() expects parameter 1 to be double, array given in %s on line %d"},
	{(char*) "exp() expects parameter 1 to be double, object given in %s on line %d"},
	{(char*) "exp() expects parameter 1 to be double, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for acosh() in %s on line 11"},
	{(char*) "Wrong parameter count for acosh() in %s on line 14"},
	{(char*) "Wrong parameter count for expm1() in %s on line %d"},
	{(char*) "Wrong parameter count for log() in %s on line 2"},
	{(char*) "Wrong parameter count for log() in %s on line 3"},
	{(char*) "log(): base must be greater than 0 in %s on line 4"},
	{(char*) "base_convert(): Invalid `from base' (0) in %s on line %d"},
	{(char*) "base_convert(): Invalid `from base' (1) in %s on line %d"},
	{(char*) "base_convert(): Invalid `from base' (-1) in %s on line %d"},
	{(char*) "base_convert(): Invalid `from base' (-12) in %s on line %d"},
	{(char*) "base_convert(): Invalid `from base' (2147483647) in %s on line %d"},
	{(char*) "base_convert(): Invalid `from base' (-10) in %s on line %d"},
	{(char*) "base_convert(): Invalid `from base' (123) in %s on line %d"},
	{(char*) "is_nan() expects exactly 1 parameter, 0 given in %s on line 2"},
	{(char*) "is_nan() expects exactly 1 parameter, 3 given in %s on line 3"},
	{(char*) "Wrong parameter count for sinh() in %s on line 11"},
	{(char*) "Wrong parameter count for sinh() in %s on line 14"},
	{(char*) "Wrong parameter count for tanh() in %s on line 11"},
	{(char*) "Wrong parameter count for tanh() in %s on line 14"},
	{(char*) "Wrong parameter count for dechex() in %s on line %d"},
	{(char*) "Wrong parameter count for atan() in %s on line 11"},
	{(char*) "Wrong parameter count for atan() in %s on line 14"},
	{(char*) "base_convert(): Invalid `to base' (0) in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (1) in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (-1) in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (-12) in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (2147483647) in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (-10) in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (123) in %s on line %d"},
	{(char*) "srand() expects parameter 1 to be long, string given in %s on line %d"},
	{(char*) "srand() expects parameter 1 to be long, array given in %s on line %d"},
	{(char*) "srand() expects parameter 1 to be long, object given in %s on line %d"},
	{(char*) "srand() expects parameter 1 to be long, resource given in %s on line %d"},
	{(char*) "mt_srand() expects parameter 1 to be long, string given in %s on line %d"},
	{(char*) "mt_srand() expects parameter 1 to be long, array given in %s on line %d"},
	{(char*) "mt_srand() expects parameter 1 to be long, object given in %s on line %d"},
	{(char*) "mt_srand() expects parameter 1 to be long, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for asinh() in %s on line 11"},
	{(char*) "Wrong parameter count for asinh() in %s on line 14"},
	{(char*) "fmod() expects parameter 1 to be double, string given in %s on line %d"},
	{(char*) "fmod() expects parameter 1 to be double, array given in %s on line %d"},
	{(char*) "fmod() expects parameter 1 to be double, object given in %s on line %d"},
	{(char*) "fmod() expects parameter 1 to be double, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for log1p() in %s on line %d"},
	{(char*) "Wrong parameter count for base_convert() in %s on line %d"},
	{(char*) "base_convert(): Invalid `to base' (37) in %s on line %d"},
	{(char*) "Wrong parameter count for atanh() in %s on line 11"},
	{(char*) "Wrong parameter count for atanh() in %s on line 14"},
	{(char*) "rand() expects exactly 2 parameters, 1 given in %s on line 2"},
	{(char*) "rand() expects exactly 2 parameters, 3 given in %s on line 3"},
	{(char*) "rand() expects parameter 1 to be long, string given in %s on line 4"},
	{(char*) "rand() expects parameter 2 to be long, string given in %s on line 5"},
	{(char*) "Wrong parameter count for deg2rad() in %s on line 11"},
	{(char*) "Wrong parameter count for deg2rad() in %s on line 14"},
	{(char*) "Wrong parameter count for abs() in %s on line %d"},
	{(char*) "Wrong parameter count for asin() in %s on line 11"},
	{(char*) "Wrong parameter count for asin() in %s on line 14"},
	{(char*) "is_nan() expects parameter 1 to be double, string given in %s on line %d"},
	{(char*) "is_nan() expects parameter 1 to be double, array given in %s on line %d"},
	{(char*) "is_nan() expects parameter 1 to be double, object given in %s on line %d"},
	{(char*) "is_nan() expects parameter 1 to be double, resource given in %s on line %d"},
	{(char*) "Wrong parameter count for sqrt() in %s on line 11"},
	{(char*) "Wrong parameter count for sqrt() in %s on line 14"},
	{(char*) "Wrong parameter count for tan() in %s on line 11"},
	{(char*) "Wrong parameter count for tan() in %s on line 14"},
	{(char*) "srand() expects at most 1 parameter, 2 given in %s on line %d"},
	{(char*) "Wrong parameter count for hypot() in %s on line %d"},
	{(char*) "Wrong parameter count for cos() in %s on line 11"},
	{(char*) "Wrong parameter count for cos() in %s on line 14"},
	{(char*) "Wrong parameter count for atan2() in %s on line 2"},
	{(char*) "Wrong parameter count for atan2() in %s on line 3"},
	{(char*) "Wrong parameter count for atan2() in %s on line 4"},
	{(char*) "Wrong parameter count for floor() in %s on line %d"},
	{(char*) "Wrong parameter count for round() in %s on line %d"},
	{(char*) "mt_rand() expects parameter 1 to be long, string given in %s on line %d"},
	{(char*) "mt_rand() expects parameter 1 to be long, array given in %s on line %d"},
	{(char*) ":__toString() must not throw an exception in %sbug26166.php on line %d"},
	{(char*) "Redefining already defined constructor for class TestClass (%sbug35634.php:12)"},
	{(char*) "Object of class stdClass could not be converted to string"},
	{(char*) "Object of class stdClass to string conversion"},
	{(char*) "Method badToString::__toString() must return a string value"},
	{(char*) "Object of class classWithToString could not be converted to int, %s(97)"},
	{(char*) "Object of class classWithoutToString could not be converted to int, %s(97)"},
	{(char*) "is not recognized!"},
	{(char*) "class_implements() expects parameter 2 to be boolean, array given, %s(%d)"},
	{(char*) "class_implements() expects parameter 2 to be boolean, object given, %s(%d)"},
	{(char*) "class_implements() expects parameter 2 to be boolean, resource given, %s(%d)"},
	{(char*) "class_implements(): object or string expected, %s(%d)"},
	{(char*) "class_implements(): Class does not exist and could not be loaded, %s(%d)"},
	{(char*) "Argument 3 passed to iterator_apply() must be an array, integer given"},
	{(char*) "iterator_apply() expects parameter 3 to be array, integer given"},
	{(char*) "iterator_apply() expects parameter 2 to be function,%sstring given"},
	{(char*) "iterator_apply() expects at most 3 parameters, 4 given"},
	{(char*) "Array to string conversion, %s(%d)"},
	{(char*) "Object of class classWithoutToString could not be converted to string, %s(%d)"},
	{(char*) "Object of class classWithoutToString to string conversion, %s(%d)"},
	{(char*) "mcrypt_encrypt(): Module initialization failed, %s(%d)"},
	{(char*) "mcrypt_decrypt(): Module initialization failed, %s(%d)"},
	{(char*) "mcrypt_cbc(): Module initialization failed, %s(%d)"},
	{(char*) "mcrypt_encrypt(): The IV parameter must be as long as the blocksize, %s(%d)"},
	{(char*) "Object of class classWithToString could not be converted to int, %s(%d)"},
	{(char*) "Object of class classWithoutToString could not be converted to int, %s(%d)"},
	{(char*) "mcrypt_decrypt(): The IV parameter must be as long as the blocksize, %s(%d)"},
	{(char*) "mcrypt_cbc(): The IV parameter must be as long as the blocksize, %s(%d)"},
	{(char*) "mcrypt_ecb(): Module initialization failed, %s(%d)"},
	{(char*) "array_intersect_ukey(): Not a valid callback , %s(%d)"},
	{(char*) "array_diff_uassoc(): Not a valid callback , %s(%d)"},
	{(char*) "array_multisort(): Argument #2 is an unknown sort flag, %sarray_multisort_variation2.php(%d)"},
	{(char*) "array_multisort(): Argument #2 is expected to be an array or a sort flag, %sarray_multisort_variation2.php(%d)"},
	{(char*) "array_multisort(): Array sizes are inconsistent, %sarray_multisort_variation2.php(%d)"},
	{(char*) "array_multisort(): Argument #3 is expected to be an array or sorting flag that has not already been specified, %sarray_multisort_variation3.php(%d)"},
	{(char*) "array_multisort(): Argument #3 is an unknown sort flag, %sarray_multisort_variation3.php(%d)"},
	{(char*) "array_multisort(): Argument #3 is expected to be an array or a sort flag, %sarray_multisort_variation3.php(%d)"},
	{(char*) "array_intersect_uassoc(): Not a valid callback , %s(%d)"},
	{(char*) "array_multisort(): Argument #1 is expected to be an array or sorting flag that has not already been specified, %sarray_multisort_variation1.php(%d)"},
	{(char*) "array_multisort(): Argument #1 is an unknown sort flag, %sarray_multisort_variation1.php(%d)"},
	{(char*) "array_multisort(): Argument #1 is expected to be an array or a sort flag, %sarray_multisort_variation1.php(%d)"},
	{(char*) "array_diff_ukey(): Not a valid callback , %s(%d)"},
	{(char*) "Undefined variable: undefined_var, %s(%d)"},
	{(char*) "Undefined variable: unset_var, %s(%d)"},
	{(char*) "getimagesize(0): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(1): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(12345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(-2345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(-10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(101234567000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(0.000107654321): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(0.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(Array): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "getimagesize(): Filename cannot be empty, %s(%d)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(%d)"},
	{(char*) "Object of class stdClass to string conversion, %s(%d)"},
	{(char*) "getimagesize(Object): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "chmod(): No such file or directory, %s(%d)"},
	{(char*) "file() expects parameter 3 to be resource, integer given, %s(%d)"},
	{(char*) "file() expects parameter 3 to be resource, double given, %s(%d)"},
	{(char*) "file() expects parameter 3 to be resource, array given, %s(%d)"},
	{(char*) "file() expects parameter 3 to be resource, boolean given, %s(%d)"},
	{(char*) "file() expects parameter 3 to be resource, string given, %s(%d)"},
	{(char*) "file() expects parameter 3 to be resource, object given, %s(%d)"},
	{(char*) "file(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "rmdir(): No such file or directory, %s(%d)"},
	{(char*) "rmdir( ): %s, %s(%d)"},
	{(char*) "basename() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "basename() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "touch(): Utime failed: Invalid argument, %s(%d)"},
	{(char*) "fopen() expects parameter 3 to be boolean, array given, %s(%d)"},
	{(char*) "fopen() expects parameter 3 to be boolean, object given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, integer given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, double given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, array given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, null given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, boolean given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, string given, %s(%d)"},
	{(char*) "unlink() expects parameter 2 to be resource, object given, %s(%d)"},
	{(char*) "unlink(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, integer given, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, double given, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, array given, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, null given, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, boolean given, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, string given, %s(%d)"},
	{(char*) "fopen() expects parameter 4 to be resource, object given, %s(%d)"},
	{(char*) "fopen(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "mkdir(): %s, %s(%d)"},
	{(char*) "mkdir() expects parameter 2 to be long, array given, %s(%d)"},
	{(char*) "mkdir() expects parameter 2 to be long, string given, %s(%d)"},
	{(char*) "mkdir() expects parameter 2 to be long, object given, %s(%d)"},
	{(char*) "readfile() expects parameter 3 to be resource, integer given, %s(%d)"},
	{(char*) "readfile() expects parameter 3 to be resource, double given, %s(%d)"},
	{(char*) "readfile() expects parameter 3 to be resource, array given, %s(%d)"},
	{(char*) "readfile() expects parameter 3 to be resource, boolean given, %s(%d)"},
	{(char*) "readfile() expects parameter 3 to be resource, string given, %s(%d)"},
	{(char*) "readfile() expects parameter 3 to be resource, object given, %s(%d)"},
	{(char*) "readfile(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "pclose(): supplied argument is not a valid stream resource, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, integer given, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, double given, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, array given, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, null given, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, boolean given, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, string given, %s(%d)"},
	{(char*) "rename() expects parameter 3 to be resource, object given, %s(%d)"},
	{(char*) "rename(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "parse_ini_file(0): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(1): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(12345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(-2345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(-10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(123456789000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(-123456789000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(0.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(Array): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(): Filename cannot be empty, %s(%d)"},
	{(char*) "parse_ini_file(Class A object): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "parse_ini_file(Object): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "readfile() expects parameter 2 to be boolean, array given, %s(%d)"},
	{(char*) "readfile() expects parameter 2 to be boolean, object given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, integer given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, double given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, array given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, null given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, boolean given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, string given, %s(%d)"},
	{(char*) "mkdir() expects parameter 4 to be resource, object given, %s(%d)"},
	{(char*) "mkdir(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "mkdir(): No such file or directory, %s(%d)"},
	{(char*) "file_get_contents(): length must be greater than or equal to zero, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 5 to be long, array given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 5 to be long, string given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 5 to be long, object given, %s(%d)"},
	{(char*) "mkdir() expects parameter 3 to be boolean, array given, %s(%d)"},
	{(char*) "mkdir() expects parameter 3 to be boolean, object given, %s(%d)"},
	{(char*) "file_put_contents() expects parameter 4 to be resource, integer given, %s(%d)"},
	{(char*) "file_put_contents() expects parameter 4 to be resource, double given, %s(%d)"},
	{(char*) "file_put_contents() expects parameter 4 to be resource, array given, %s(%d)"},
	{(char*) "file_put_contents() expects parameter 4 to be resource, boolean given, %s(%d)"},
	{(char*) "file_put_contents() expects parameter 4 to be resource, string given, %s(%d)"},
	{(char*) "file_put_contents() expects parameter 4 to be resource, object given, %s(%d)"},
	{(char*) "file_put_contents(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 2 to be boolean, array given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 2 to be boolean, object given, %s(%d)"},
	{(char*) "rmdir(): %s, %s(%d)"},
	{(char*) "fstat(): supplied argument is not a valid stream resource, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, integer given, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, double given, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, array given, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, null given, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, boolean given, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, string given, %s(%d)"},
	{(char*) "rmdir() expects parameter 2 to be resource, object given, %s(%d)"},
	{(char*) "rmdir(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "pathinfo() expects parameter 2 to be long, array given, %s(%d)"},
	{(char*) "pathinfo() expects parameter 2 to be long, string given, %s(%d)"},
	{(char*) "pathinfo() expects parameter 2 to be long, object given, %s(%d)"},
	{(char*) "basename() expects parameter 2 to be string, array given, %s(%d)"},
	{(char*) "basename() expects parameter 2 to be string, object given, %s(%d)"},
	{(char*) "pathinfo() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "pathinfo() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 4 to be long, array given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 4 to be long, string given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 4 to be long, object given, %s(%d)"},
	{(char*) "file(0): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(1): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(12345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(-2345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(-10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(123456789000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(-123456789000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file(0.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "file(): Filename cannot be empty, %s(%d)"},
	{(char*) "file(Class A object): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "file() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "file(): '-10' flag is not supported, %s(%d)"},
	{(char*) "file(): '%i' flag is not supported, %s(%d)"},
	{(char*) "file() expects parameter 2 to be long, array given, %s(%d)"},
	{(char*) "file() expects parameter 2 to be long, string given, %s(%d)"},
	{(char*) "file() expects parameter 2 to be long, object given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 3 to be resource, integer given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 3 to be resource, double given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 3 to be resource, array given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 3 to be resource, boolean given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 3 to be resource, string given, %s(%d)"},
	{(char*) "file_get_contents() expects parameter 3 to be resource, object given, %s(%d)"},
	{(char*) "file_get_contents(): supplied resource is not a valid Stream-Context resource, %s(%d)"},
	{(char*) "Undefined variable: undefined_var, %s(61)"},
	{(char*) "Undefined variable: unset_var, %s(64)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(70)"},
	{(char*) "Undefined variable: undefined_var, %s(62)"},
	{(char*) "Undefined variable: unset_var, %s(65)"},
	{(char*) "Array to string conversion, %s(72)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(71)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(72)"},
	{(char*) "Object of class stdClass to string conversion, %s(72)"},
	{(char*) "Undefined variable: undefined_var, %s(64)"},
	{(char*) "Undefined variable: unset_var, %s(67)"},
	{(char*) "Array to string conversion, %s(74)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(73)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(74)"},
	{(char*) "Object of class stdClass to string conversion, %s(74)"},
	{(char*) "eregi_replace(): REG_EMPTY, %s(74)"},
	{(char*) "Object of class stdClass could not be converted to int, %s(74)"},
	{(char*) "split(): REG_EMPTY, %s(74)"},
	{(char*) "Undefined variable: undefined_var, %s(65)"},
	{(char*) "Undefined variable: unset_var, %s(68)"},
	{(char*) "Array to string conversion, %s(75)"},
	{(char*) "eregi(): REG_EMPTY, %s(75)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(75)"},
	{(char*) "Object of class stdClass to string conversion, %s(75)"},
	{(char*) "Object of class stdClass could not be converted to int, %s(73)"},
	{(char*) "ereg(): REG_EMPTY, %s(75)"},
	{(char*) "spliti(): REG_EMPTY, %s(74)"},
	{(char*) "ereg_replace(): REG_EMPTY, %s(74)"},
	{(char*) "Undefined variable: undefined_var, %s(67)"},
	{(char*) "Undefined variable: unset_var, %s(70)"},
	{(char*) "class_exists() expects parameter 1 to be string, array given, %s(77)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(76)"},
	{(char*) "class_exists() expects parameter 1 to be string, object given, %s(77)"},
	{(char*) "Undefined variable: undefined_var, %s(69)"},
	{(char*) "Undefined variable: unset_var, %s(72)"},
	{(char*) "Unknown class passed as parameter, %s(79)"},
	{(char*) "Array to string conversion, %s(77)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(77)"},
	{(char*) "Object of class stdClass to string conversion, %s(77)"},
	{(char*) "Undefined variable: undefined_var, %s(68)"},
	{(char*) "Undefined variable: unset_var, %s(71)"},
	{(char*) "Undefined variable: undefined_var, %s(71)"},
	{(char*) "Undefined variable: unset_var, %s(74)"},
	{(char*) "class_exists() expects parameter 2 to be boolean, array given, %s(81)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(80)"},
	{(char*) "class_exists() expects parameter 2 to be boolean, object given, %s(81)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '0' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '1' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '12345' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '-2345' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '10.5' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '-10.5' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '123456789000' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '-123456789000' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '0.5' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, 'Array' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, '' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, 'Class A object' was given, %s(%d)"},
	{(char*) "call_user_func_array(): First argument is expected to be a valid callback, 'Object' was given, %s(%d)"},
	{(char*) "base64_decode() expects parameter 2 to be boolean, array given, %s(%d)"},
	{(char*) "base64_decode() expects parameter 2 to be boolean, object given, %s(%d)"},
	{(char*) "base64_decode() expects parameter 2 to be boolean, resource given, %s(%d)"},
	{(char*) "base64_decode() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "base64_decode() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "base64_decode() expects parameter 1 to be string, resource given, %s(%d)"},
	{(char*) "urldecode() expects parameter 1 to be string, array given, %s(74)"},
	{(char*) "urldecode() expects parameter 1 to be string, object given, %s(74)"},
	{(char*) "parse_url(): Invalid URL component identifier 10, %s(71)"},
	{(char*) "parse_url(): Invalid URL component identifier 101234567000, %s(71)"},
	{(char*) "parse_url() expects parameter 2 to be long, array given, %s(71)"},
	{(char*) "parse_url() expects parameter 2 to be long, string given, %s(71)"},
	{(char*) "parse_url() expects parameter 2 to be long, object given, %s(71)"},
	{(char*) "rawurlencode() expects parameter 1 to be string, array given, %s(74)"},
	{(char*) "rawurlencode() expects parameter 1 to be string, object given, %s(74)"},
	{(char*) "urlencode() expects parameter 1 to be string, array given, %s(74)"},
	{(char*) "urlencode() expects parameter 1 to be string, object given, %s(74)"},
	{(char*) "Undefined variable: undefined_var, %s(60)"},
	{(char*) "Undefined variable: unset_var, %s(63)"},
	{(char*) "parse_url() expects parameter 1 to be string, array given, %s(70)"},
	{(char*) "Object of class stdClass could not be converted to string, %s(69)"},
	{(char*) "parse_url() expects parameter 1 to be string, object given, %s(70)"},
	{(char*) "rawurldecode() expects parameter 1 to be string, array given, %s(74)"},
	{(char*) "rawurldecode() expects parameter 1 to be string, object given, %s(74)"},
	{(char*) "Undefined variable: undefined_var, %s(63)"},
	{(char*) "Undefined variable: unset_var, %s(66)"},
	{(char*) "base64_encode() expects parameter 1 to be string, array given, %s(73)"},
	{(char*) "base64_encode() expects parameter 1 to be string, object given, %s(73)"},
	{(char*) "mime_content_type(): can only process string or stream arguments, %s(%d)"},
	{(char*) "mime_content_type(): supplied resource is not a valid stream resource, %s(%d)"},
	{(char*) "simplexml_load_string() expects parameter 2 to be a class name derived from SimpleXMLElement, 'Setting' given"},
	{(char*) "Argument 1 passed to Reflection::export() must implement interface Reflector, null given"},
	{(char*) "Reflection::export() expects parameter 1 to be Reflector, null given"},
	{(char*) "simplexml_load_file() expects parameter 2 to be a class name derived from SimpleXMLElement, 'Setting' given"},
	{(char*) "mb_stristr() expects parameter 3 to be boolean, array given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 3 to be boolean, object given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 3 to be boolean, resource given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 3 to be boolean, array given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 3 to be boolean, object given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 3 to be boolean, resource given, %s(%d)"},
	{(char*) "mb_substitute_character(): Unknown character., %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"0\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"1\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"12345\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"-2345\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"10.5\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"-10.5\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"123456789000\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"-123456789000\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"0.5\", %s(%d)"},
	{(char*) "mb_stristr() expects parameter 4 to be string, array given, %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"\", %s(%d)"},
	{(char*) "mb_stristr(): Unknown encoding \"invalid\", %s(%d)"},
	{(char*) "mb_stristr() expects parameter 4 to be string, object given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 4 to be string, resource given, %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"0\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"1\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"12345\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"-2345\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"10.5\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"-10.5\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"123456789000\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"-123456789000\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"0.5\", %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 4 to be string, array given, %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"\", %s(%d)"},
	{(char*) "mb_strrichr(): Unknown encoding \"invalid\", %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 4 to be string, object given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 4 to be string, resource given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 3 to be boolean, array given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 3 to be boolean, object given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 3 to be boolean, resource given, %s(%d)"},
	{(char*) "mb_decode_mimeheader() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "mb_decode_mimeheader() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "mb_decode_mimeheader() expects parameter 1 to be string, resource given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 2 to be string, array given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 2 to be string, object given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 2 to be string, resource given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 1 to be string, resource given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 1 to be string, resource given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 3 to be boolean, array given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 3 to be boolean, object given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 3 to be boolean, resource given, %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"0\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"1\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"12345\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"-2345\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"10.5\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"-10.5\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"123456789000\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"-123456789000\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"0.5\", %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 4 to be string, array given, %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"\", %s(%d)"},
	{(char*) "mb_strrchr(): Unknown encoding \"invalid\", %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 4 to be string, object given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 4 to be string, resource given, %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"0\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"1\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"12345\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"-2345\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"10.5\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"-10.5\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"123456789000\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"-123456789000\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"0.5\", %s(%d)"},
	{(char*) "mb_strstr() expects parameter 4 to be string, array given, %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"\", %s(%d)"},
	{(char*) "mb_strstr(): Unknown encoding \"invalid\", %s(%d)"},
	{(char*) "mb_strstr() expects parameter 4 to be string, object given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 4 to be string, resource given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 1 to be string, resource given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "mb_strrchr() expects parameter 1 to be string, resource given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 2 to be string, array given, %s(%d)"},
	{(char*) "mb_strstr(): Empty delimiter, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 2 to be string, object given, %s(%d)"},
	{(char*) "mb_strstr() expects parameter 2 to be string, resource given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 2 to be string, array given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 2 to be string, object given, %s(%d)"},
	{(char*) "mb_strrichr() expects parameter 2 to be string, resource given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 2 to be string, array given, %s(%d)"},
	{(char*) "mb_stristr(): Empty delimiter, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 2 to be string, object given, %s(%d)"},
	{(char*) "mb_stristr() expects parameter 2 to be string, resource given, %s(%d)"},
	{(char*) "gzopen(%s/004.txt.gz): failed to open stream: %s, %s(%d)"},
	{(char*) "gzopen() expects parameter 2 to be string, array given, %s(%d)"},
	{(char*) "gzopen() expects parameter 2 to be string, object given, %s(%d)"},
	{(char*) "gzopen() expects parameter 2 to be string, resource given, %s(%d)"},
	{(char*) "readgzfile() expects parameter 2 to be long, object given, %s(%d)"},
	{(char*) "gzopen() expects parameter 3 to be long, array given, %s(%d)"},
	{(char*) "gzopen() expects parameter 3 to be long, string given, %s(%d)"},
	{(char*) "gzopen() expects parameter 3 to be long, object given, %s(%d)"},
	{(char*) "gzopen() expects parameter 3 to be long, resource given, %s(%d)"},
	{(char*) "gzfile() expects parameter 2 to be long, object given, %s(%d)"},
	{(char*) "gzfile(Class A object): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzfile() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "readgzfile() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "gzopen(0): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(1): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(12345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(-2345): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(-10.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(123456789000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(-123456789000): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen(0.5): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen() expects parameter 1 to be string, array given, %s(%d)"},
	{(char*) "gzopen(): Filename cannot be empty, %s(%d)"},
	{(char*) "gzopen(Class A object): failed to open stream: No such file or directory, %s(%d)"},
	{(char*) "gzopen() expects parameter 1 to be string, object given, %s(%d)"},
	{(char*) "gzopen() expects parameter 1 to be string, resource given, %s(%d)"}
};


// These formats are all the different types of formats that can be found in the above table
char *phpFmtReplacements[] = {
 	"%d",
 	"%s",
	NULL
};


// Generates an allocated array of PHP error codes
P_BP_PHP_ERR_CODES BP_PHPGenErrCodeArray(){

	size_t retSize = sizeof(phpErrCodes);
	P_BP_PHP_ERR_CODES retTable = (P_BP_PHP_ERR_CODES) bpcalloc(retSize, 1);
	if(!retTable)
		return NULL;

	BP_ASP_ERR_CODES nullCmp;
	memset(&nullCmp, 0x00, sizeof(nullCmp));

	// duplicate the array
	size_t x = 0;
	for(x = 0; ( sizeof(BP_PHP_ERR_CODES) * x ) < sizeof(phpErrCodes); x++){

		// duplicate string in table
		retTable[x].phpErrStr = bpstrdup(phpErrCodes[x].phpErrStr);

	}

	return retTable;
}


// Generates a list of error code tests based around the
// error code array defined above.  This set is basically
// a string array w/o format strings.
P_BP_FMT_ERR_TESTS BP_PHPGenErrTestsFromErrCodeArray
(
		P_BP_PHP_ERR_CODES inCodes,
		size_t numCodes,
		char **fmtReplacementTable
)
{

	// ensure we have codes to work with
	if(!inCodes)
		return NULL;

	size_t i = 0;
	P_BP_FMT_ERR_TESTS genSet = NULL;
	BP_FMT_ERR_TESTS * retSet = NULL;

	// set code array pointer into an indexable typedef
	BP_PHP_ERR_CODES * testCodes = (P_BP_PHP_ERR_CODES) inCodes;


	for(i = 0; i < numCodes; i++)
	{

		// increase the size of the return set
		retSet = (BP_FMT_ERR_TESTS *) bprealloc(retSet, ((i+1) * sizeof(BP_FMT_ERR_TESTS)) + sizeof(BP_FMT_ERR_TESTS));

		// generate match set from a string
		genSet = BP_GenerateMatchSetFromTestString(testCodes[i].phpErrStr, bpstrlen(testCodes[i].phpErrStr), fmtReplacementTable);
		//__asm("int3");
		if(!genSet)
			return NULL;

		// copy in the array data
		memcpy(&retSet[i], genSet, sizeof(BP_FMT_ERR_TESTS));

		// zero out trailing item
		memset(&retSet[i+1], 0x00, sizeof(BP_FMT_ERR_TESTS));

		// destroy chunk structure (dont destroy internal pointers)
		bpfree(genSet);
		genSet = NULL;

	}

	// return the filled out structure
	return (P_BP_FMT_ERR_TESTS) retSet;

}

// Returns the total number of checks within the msql array.
size_t BP_PHPErrCount()
{

	size_t retCount = sizeof(phpErrCodes) / sizeof(BP_PHP_ERR_CODES);
	return retCount;
}



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of PHP error code allocations
size_t BP_DestroyPHPErrCodes(BP_PHP_ERR_CODES * codes){

	if(!codes)
		return ERR_FAILURE;

	size_t x = 0;
	for(x = 0; x < BP_PHPErrCount(); x++){
		bpfree(codes[x].phpErrStr);
	}

	// NO MORE FREE CODE, NO MORE, NONE lol (memory 4free tho | bovice)
	bpfree(codes);

	// return success
	return ERR_SUCCESS;
}

