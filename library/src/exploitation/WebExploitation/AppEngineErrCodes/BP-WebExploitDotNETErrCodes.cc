/*
 * BP-WebExploitDotNETErrCodes.cc
 *
 *  Created on: Apr 7, 2009
 *      Author: root
 */

#include "../../../../include/BP-Main.h"

// JM Note: Root exceptions should be fine for catching traces.
BP_DNET_ERR_CODES dnetErrCodes[] = {
		{(char *)"System.Object"},
		{(char *)"System.Data"},
		{(char *)"System.Exception"},
		{(char *)"System.ApplicationException"},
		{(char *)"System.IO.IsolatedStorage.IsolatedStorageException"},
		{(char *)"System.Runtime.Remoting.MetadataServices.SUDSGeneratorException"},
		{(char *)"System.Runtime.Remoting.MetadataServices.SUDSParserException"},
		{(char *)"System.SystemException"},
		{(char *)"System.Windows.Forms.AxHost.InvalidActiveXStateException"},
		{(char *)"System.Data.SqlClient"},
		{(char *)"System.Data.SqlClient.SqlException"}

};


// Generates an allocated array of dot net error codes
P_BP_DNET_ERR_CODES BP_DNETGenErrCodeArray(){

	size_t retSize = sizeof(dnetErrCodes);
	P_BP_DNET_ERR_CODES retTable = (P_BP_DNET_ERR_CODES) bpcalloc(retSize, 1);
	if(!retTable)
		return NULL;

	BP_DNET_ERR_CODES nullCmp;
	memset(&nullCmp, 0x00, sizeof(nullCmp));

	// duplicate the array
	size_t x = 0;
	for(x = 0; ( sizeof(BP_DNET_ERR_CODES) * x ) < sizeof(dnetErrCodes); x++){

		// duplicate string in table
		retTable[x].exceptionStr = bpstrdup(dnetErrCodes[x].exceptionStr);

	}

	return retTable;
}


// Generates a list of error code tests based around the
// error code array defined above.  This set is basically
// a string array w/o format strings.
P_BP_FMT_ERR_TESTS BP_DNETGenErrTestsFromErrCodeArray(P_BP_DNET_ERR_CODES inCodes, size_t numCodes, char **fmtReplacementTable){

	if(!inCodes)
		return NULL;

	size_t i = 0;
	P_BP_FMT_ERR_TESTS genSet = NULL;
	BP_FMT_ERR_TESTS * retSet = NULL;


	// set code array pointer into an indexable typedef
	BP_DNET_ERR_CODES * testCodes = (P_BP_DNET_ERR_CODES) inCodes;


	for(i = 0; i < numCodes; i++){

		// increase the size of the return set
		retSet = (BP_FMT_ERR_TESTS *) bprealloc(retSet, ((i+1) * sizeof(BP_FMT_ERR_TESTS)) + sizeof(BP_FMT_ERR_TESTS));

		// generate match set from a string
		genSet = BP_GenerateMatchSetFromTestString(testCodes[i].exceptionStr, bpstrlen(testCodes[i].exceptionStr), fmtReplacementTable);
		if(!genSet)
			return NULL;

		// copy in the array data
		memcpy(&retSet[i], genSet, sizeof(BP_FMT_ERR_TESTS));

		// zero trailing item
		memset(&retSet[i+1], 0x00, sizeof(BP_FMT_ERR_TESTS));

		// destroy chunk structure (dont destroy internal pointers)
		bpfree(genSet);
		genSet = NULL;

	}

	// return the filled out structure
	return (P_BP_FMT_ERR_TESTS) retSet;
}

// Returns the total number of checks within the msql array.
size_t BP_DNETErrCount(){

	size_t retCount = sizeof(dnetErrCodes) / sizeof(BP_DNET_ERR_CODES);
	return retCount;
}



// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%% DECONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Destroys a set of .NET error code allocations
size_t BP_DestroyDNETErrCodes(BP_DNET_ERR_CODES * codes){

	if(!codes)
		return ERR_FAILURE;

	size_t x = 0;
	for(x = 0; x < BP_DNETErrCount(); x++){
		bpfree(codes[x].exceptionStr);
	}

	// NO MORE FREE CODE, NO MORE, NONE lol (memory 4free tho | bovice)
	bpfree(codes);

	// return success
	return ERR_SUCCESS;
}
